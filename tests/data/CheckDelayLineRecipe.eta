{"eta_index_table":"[{\"id\":\"var_templatejkim3bkj\",\"name\":\"filename\",\"group\":\"compile\",\"info\":\"\",\"config\":\"C:/Users/Samuel Gyger/Documents/srccontrol/ETA/tests/hydraharp/data/19_HH400_T3_80MHz_HBT.timeres\"},{\"id\":\"var_templatek1tsou4o\",\"name\":\"delaylength\",\"group\":\"compile\",\"info\":\"\",\"config\":\"176\"},{\"id\":\"dpp_templatek6b3xcxq\",\"name\":\"Run test\",\"group\":\"compile\",\"info\":\"\",\"config\":\"\"},{\"id\":\"ri_templatejkim223k\",\"name\":\"Time Tagger\",\"group\":\"compile\",\"info\":\"ðŸ“¤ [0, 1]\",\"config\":\"[2,0]\"},{\"id\":\"vi_templatejks7yt8a\",\"name\":\"delay0-2\",\"group\":\"compile\",\"info\":\"ðŸ“¥ [0], ðŸ“¤ [2] \",\"config\":\"\"},{\"id\":\"vi_templatejhrlupxy\",\"name\":\"delay1-3\",\"group\":\"compile\",\"info\":\"ðŸ“¥ [1], ðŸ“¤ [3] \",\"config\":\"\"},{\"id\":\"vi_templatek1tsmoco\",\"name\":\"DelayLineChecker\",\"group\":\"compile\",\"info\":\"ðŸ“¥ [0, 1, 3], ðŸ“¤ [] \",\"config\":\"\"}]","vi_templatejhrlupxy":"{\"nodes\":[{\"x\":141,\"y\":129,\"fixed\":true,\"initial\":true,\"text\":\"a\"}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"1\"}],\"usercode\":\"a:\\n    emit(3,`delaylength`)# here, ch1 is duplicated to ch3 with a delay of 0ps\"}","ri_templatejkim223k":null,"var_templatejkim3bkj":null,"vi_templatejks7yt8a":"{\"nodes\":[{\"x\":141,\"y\":129,\"fixed\":true,\"initial\":true,\"text\":\"a\"}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"0\"}],\"usercode\":\"a:\\n    emit(2,0)# here, ch0 is duplicated to ch2 with a delay of 0ps\"}","vi_templatek1tsmoco":"{\"nodes\":[{\"x\":128,\"y\":132,\"fixed\":true,\"text\":\"a\",\"initial\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"0,1,3\"}],\"usercode\":\"INTEGER(last_tag)\\nINTEGER(last_event_goes_into_delayline)\\n{{{\\n    print(\\\"SYNCRate_pspr\\\",SYNCRate_pspr)\\n    \\n\\n}}}\\na:\\n    {{{\\n        # for monotonically increasing checker\\n        if AbsTime_ps >= last_tag :\\n            pass \\n        else:\\n            print(\\\"chronological error detected: events travel through time\\\")\\n            print(chn,AbsTime_ps)\\n            \\n        # for delay line checker\\n        if chn[0]==1:\\n            \\n            if last_event_goes_into_delayline==0:\\n                #if the last thing comes out already\\n                last_event_goes_into_delayline=AbsTime_ps\\n            else:\\n                print(\\\"there is more than one thingy in the delay line but the cheker can only remember one. false error might be reported.\\\")\\n                print(chn,AbsTime_ps)\\n        elif chn[0]==3:\\n            if last_event_goes_into_delayline+`delaylength` == AbsTime_ps:\\n                last_event_goes_into_delayline=0 \\n                # rest it to indicate the last event came out\\n            else:\\n                print(\\\"delay line error detected: delay line is generating stupid things\\\")\\n                print(chn,AbsTime_ps)\\n        elif chn[0]==0:\\n            pass # dark counts\\n        else:\\n            print(\\\"delay line error detected: a event from a non-exising channel\\\")\\n            print(chn,AbsTime_ps)\\n        \\n        # for monotonically increasing checker\\n        last_tag=AbsTime_ps\\n    }}}\"}","var_templatek1tsou4o":null,"dpp_templatek6b3xcxq":"cut=eta.simple_cut(filename, 4)\nresult = eta.run(cut, group=\"compile\")"}