(int64, array(int64, 1d, C))//////////////; ModuleID = 'foo'
source_filename = "<string>"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

$"\01??_C@_0L@HKILODAM@myfile?4txt?$AA@" = comdat any

$"\01??_C@_01NOFIACDB@w?$AA@" = comdat any

$"\01??_C@_0CH@HJKGDBJN@This?5sentence?5is?5redirected?5to?5a@" = comdat any

$"\01??_C@_05JMLLFKBP@?$CFllu?6?$AA@" = comdat any

@.const.foo = internal constant [4 x i8] c"foo\00"
@".const.Fatal error: missing _dynfunc.Closure" = internal constant [38 x i8] c"Fatal error: missing _dynfunc.Closure\00"
@PyExc_RuntimeError = external global i8
@".const.missing Environment" = internal constant [20 x i8] c"missing Environment\00"
@"\01??_C@_0L@HKILODAM@myfile?4txt?$AA@" = linkonce_odr unnamed_addr constant [11 x i8] c"myfile.txt\00", comdat, align 1
@"\01??_C@_01NOFIACDB@w?$AA@" = linkonce_odr unnamed_addr constant [2 x i8] c"w\00", comdat, align 1
@"\01??_C@_0CH@HJKGDBJN@This?5sentence?5is?5redirected?5to?5a@" = linkonce_odr unnamed_addr constant [39 x i8] c"This sentence is redirected to a file.\00", comdat, align 1
@"\01??_C@_05JMLLFKBP@?$CFllu?6?$AA@" = linkonce_odr unnamed_addr constant [6 x i8] c"%llu\0A\00", comdat, align 1
@asm_sum.test = internal unnamed_addr global i64 1, align 8

; Function Attrs: nounwind
define i32 @"_ZN8__main__7foo$241Ex5ArrayIxLi1E1C7mutable7alignedE"(i64* noalias nocapture %retptr, { i8*, i32 }** noalias nocapture readnone %excinfo, i8* noalias nocapture readnone %env, i64 %arg.a, i8* nocapture readnone %arg.b.0, i8* nocapture readnone %arg.b.1, i64 %arg.b.2, i64 %arg.b.3, i64* nocapture %arg.b.4, i64 %arg.b.5.0, i64 %arg.b.6.0) local_unnamed_addr #0 {
entry:
  %0 = getelementptr inbounds i64, i64* %arg.b.4, i64 1
  %1 = getelementptr inbounds i64, i64* %arg.b.4, i64 2
  %2 = getelementptr inbounds i64, i64* %arg.b.4, i64 3
  %3 = getelementptr inbounds i64, i64* %arg.b.4, i64 4
  %4 = getelementptr inbounds i64, i64* %arg.b.4, i64 5
  %5 = getelementptr inbounds i64, i64* %arg.b.4, i64 6
  %6 = getelementptr inbounds i64, i64* %arg.b.4, i64 7
  %7 = getelementptr inbounds i64, i64* %arg.b.4, i64 8
  %8 = getelementptr inbounds i64, i64* %arg.b.4, i64 9
  %9 = tail call { i8* }* @fopen(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"\01??_C@_0L@HKILODAM@myfile?4txt?$AA@", i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"\01??_C@_01NOFIACDB@w?$AA@", i64 0, i64 0)) #0
  %10 = tail call i64 @fwrite(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @"\01??_C@_0CH@HJKGDBJN@This?5sentence?5is?5redirected?5to?5a@", i64 0, i64 0), i64 38, i64 1, { i8* }* %9) #0
  %11 = tail call i32 @fclose({ i8* }* %9) #0
  %12 = tail call i32 bitcast (i32 (...)* @PySys_WriteStdout to i32 (i8*, { i8* }*)*)(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"\01??_C@_05JMLLFKBP@?$CFllu?6?$AA@", i64 0, i64 0), { i8* }* %9) #0
  %13 = tail call i8* @malloc(i64 10) #0
  store i8 115, i8* %13, align 1
  %14 = getelementptr inbounds i8, i8* %13, i64 1
  store i8 116, i8* %14, align 1
  %15 = getelementptr inbounds i8, i8* %13, i64 2
  store i8 10, i8* %15, align 1
  %16 = getelementptr inbounds i8, i8* %13, i64 3
  store i8 0, i8* %16, align 1
  %17 = tail call i32 bitcast (i32 (...)* @PySys_WriteStdout to i32 (i8*)*)(i8* %13) #0
  %18 = load i64, i64* @asm_sum.test, align 8
  %19 = load i64, i64* %0, align 8
  %20 = add nsw i64 %19, 1
  store i64 %20, i64* %0, align 8
  %21 = load i64, i64* %1, align 8
  %22 = add nsw i64 %21, 2
  store i64 %22, i64* %1, align 8
  %23 = load i64, i64* %2, align 8
  %24 = add nsw i64 %23, 3
  store i64 %24, i64* %2, align 8
  %25 = load i64, i64* %3, align 8
  %26 = add nsw i64 %25, 4
  store i64 %26, i64* %3, align 8
  %27 = load i64, i64* %4, align 8
  %28 = add nsw i64 %27, 5
  store i64 %28, i64* %4, align 8
  %29 = load i64, i64* %5, align 8
  %30 = add nsw i64 %29, 6
  store i64 %30, i64* %5, align 8
  %31 = load i64, i64* %6, align 8
  %32 = add nsw i64 %31, 7
  store i64 %32, i64* %6, align 8
  %33 = load i64, i64* %7, align 8
  %34 = add nsw i64 %33, 8
  store i64 %34, i64* %7, align 8
  %35 = load i64, i64* %8, align 8
  %36 = add nsw i64 %35, 9
  store i64 %36, i64* %8, align 8
  %37 = add i64 %18, 10
  store i64 %37, i64* @asm_sum.test, align 8
  store i64 %37, i64* %retptr, align 8
  ret i32 0
}

define i8* @"_ZN7cpython8__main__7foo$241Ex5ArrayIxLi1E1C7mutable7alignedE"(i8* %py_closure, i8* %py_args, i8* nocapture readnone %py_kws) local_unnamed_addr {
entry:
  %.5 = alloca i8*, align 8
  %.6 = alloca i8*, align 8
  %.7 = call i32 (i8*, i8*, i64, i64, ...) @PyArg_UnpackTuple(i8* %py_args, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.const.foo, i64 0, i64 0), i64 2, i64 2, i8** nonnull %.5, i8** nonnull %.6)
  %.8 = icmp eq i32 %.7, 0
  %.46 = alloca { i8*, i8*, i64, i64, i64*, [1 x i64], [1 x i64] }, align 8
  %0 = bitcast { i8*, i8*, i64, i64, i64*, [1 x i64], [1 x i64] }* %.46 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull %0, i8 0, i64 56, i32 8, i1 false)
  br i1 %.8, label %entry.if, label %entry.endif, !prof !3

entry.if:                                         ; preds = %entry.endif.endif.endif.endif.endif, %entry.endif.endif.endif.endif, %entry
  ret i8* null

entry.endif:                                      ; preds = %entry
  %.12 = icmp eq i8* %py_closure, null
  br i1 %.12, label %entry.endif.if, label %entry.endif.endif, !prof !3

entry.endif.if:                                   ; preds = %entry.endif
  %.14 = call i32 @puts(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @".const.Fatal error: missing _dynfunc.Closure", i64 0, i64 0))
  unreachable

entry.endif.endif:                                ; preds = %entry.endif
  %.16 = ptrtoint i8* %py_closure to i64
  %.17 = add i64 %.16, 24
  %.19 = inttoptr i64 %.17 to { i8* }*
  %.202 = bitcast { i8* }* %.19 to i8**
  %.21 = load i8*, i8** %.202, align 8
  %.26 = icmp eq i8* %.21, null
  br i1 %.26, label %entry.endif.endif.if, label %entry.endif.endif.endif, !prof !3

entry.endif.endif.if:                             ; preds = %entry.endif.endif
  call void @PyErr_SetString(i8* nonnull @PyExc_RuntimeError, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @".const.missing Environment", i64 0, i64 0))
  ret i8* null

entry.endif.endif.endif:                          ; preds = %entry.endif.endif
  %.30 = load i8*, i8** %.5, align 8
  %.32 = call i8* @PyNumber_Long(i8* %.30)
  %.33 = icmp eq i8* %.32, null
  br i1 %.33, label %entry.endif.endif.endif.endif, label %entry.endif.endif.endif.if, !prof !3

entry.endif.endif.endif.if:                       ; preds = %entry.endif.endif.endif
  %.35 = call i64 @PyLong_AsLongLong(i8* nonnull %.32)
  call void @Py_DecRef(i8* nonnull %.32)
  br label %entry.endif.endif.endif.endif

entry.endif.endif.endif.endif:                    ; preds = %entry.endif.endif.endif, %entry.endif.endif.endif.if
  %.40 = call i8* @PyErr_Occurred()
  %.41 = icmp eq i8* %.40, null
  br i1 %.41, label %entry.endif.endif.endif.endif.endif, label %entry.if, !prof !4

entry.endif.endif.endif.endif.endif:              ; preds = %entry.endif.endif.endif.endif
  %.45 = load i8*, i8** %.6, align 8
  %.48 = bitcast { i8*, i8*, i64, i64, i64*, [1 x i64], [1 x i64] }* %.46 to i8*
  %.49 = call i32 @NRT_adapt_ndarray_from_python(i8* %.45, i8* nonnull %.48)
  %.50 = icmp eq i32 %.49, 0
  br i1 %.50, label %entry.endif.endif.endif.endif.endif.endif, label %entry.if, !prof !4

entry.endif.endif.endif.endif.endif.endif:        ; preds = %entry.endif.endif.endif.endif.endif
  %1 = bitcast { i8*, i8*, i64, i64, i64*, [1 x i64], [1 x i64] }* %.46 to i8**
  %.51.fca.0.load = load i8*, i8** %1, align 8
  %2 = bitcast { i8*, i8*, i64, i64, i64*, [1 x i64], [1 x i64] }* %.46 to i8*
  %sunkaddr = getelementptr i8, i8* %2, i64 32
  %3 = bitcast i8* %sunkaddr to i64**
  %.51.fca.4.load = load i64*, i64** %3, align 8
  %4 = getelementptr inbounds i64, i64* %.51.fca.4.load, i64 1
  %5 = getelementptr inbounds i64, i64* %.51.fca.4.load, i64 2
  %6 = getelementptr inbounds i64, i64* %.51.fca.4.load, i64 3
  %7 = getelementptr inbounds i64, i64* %.51.fca.4.load, i64 4
  %8 = getelementptr inbounds i64, i64* %.51.fca.4.load, i64 5
  %9 = getelementptr inbounds i64, i64* %.51.fca.4.load, i64 6
  %10 = getelementptr inbounds i64, i64* %.51.fca.4.load, i64 7
  %11 = getelementptr inbounds i64, i64* %.51.fca.4.load, i64 8
  %12 = getelementptr inbounds i64, i64* %.51.fca.4.load, i64 9
  %13 = call { i8* }* @fopen(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"\01??_C@_0L@HKILODAM@myfile?4txt?$AA@", i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"\01??_C@_01NOFIACDB@w?$AA@", i64 0, i64 0)) #0, !noalias !5
  %14 = call i64 @fwrite(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @"\01??_C@_0CH@HJKGDBJN@This?5sentence?5is?5redirected?5to?5a@", i64 0, i64 0), i64 38, i64 1, { i8* }* %13) #0, !noalias !5
  %15 = call i32 @fclose({ i8* }* %13) #0, !noalias !5
  %16 = call i32 bitcast (i32 (...)* @PySys_WriteStdout to i32 (i8*, { i8* }*)*)(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"\01??_C@_05JMLLFKBP@?$CFllu?6?$AA@", i64 0, i64 0), { i8* }* %13) #0, !noalias !5
  %17 = call i8* @malloc(i64 10) #0, !noalias !5
  store i8 115, i8* %17, align 1, !noalias !5
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8 116, i8* %18, align 1, !noalias !5
  %19 = getelementptr inbounds i8, i8* %17, i64 2
  store i8 10, i8* %19, align 1, !noalias !5
  %20 = getelementptr inbounds i8, i8* %17, i64 3
  store i8 0, i8* %20, align 1, !noalias !5
  %21 = call i32 bitcast (i32 (...)* @PySys_WriteStdout to i32 (i8*)*)(i8* %17) #0, !noalias !5
  %22 = load i64, i64* @asm_sum.test, align 8, !noalias !5
  %23 = load i64, i64* %4, align 8, !noalias !5
  %24 = add nsw i64 %23, 1
  store i64 %24, i64* %4, align 8, !noalias !5
  %25 = load i64, i64* %5, align 8, !noalias !5
  %26 = add nsw i64 %25, 2
  store i64 %26, i64* %5, align 8, !noalias !5
  %27 = load i64, i64* %6, align 8, !noalias !5
  %28 = add nsw i64 %27, 3
  store i64 %28, i64* %6, align 8, !noalias !5
  %29 = load i64, i64* %7, align 8, !noalias !5
  %30 = add nsw i64 %29, 4
  store i64 %30, i64* %7, align 8, !noalias !5
  %31 = load i64, i64* %8, align 8, !noalias !5
  %32 = add nsw i64 %31, 5
  store i64 %32, i64* %8, align 8, !noalias !5
  %33 = load i64, i64* %9, align 8, !noalias !5
  %34 = add nsw i64 %33, 6
  store i64 %34, i64* %9, align 8, !noalias !5
  %35 = load i64, i64* %10, align 8, !noalias !5
  %36 = add nsw i64 %35, 7
  store i64 %36, i64* %10, align 8, !noalias !5
  %37 = load i64, i64* %11, align 8, !noalias !5
  %38 = add nsw i64 %37, 8
  store i64 %38, i64* %11, align 8, !noalias !5
  %39 = load i64, i64* %12, align 8, !noalias !5
  %40 = add nsw i64 %39, 9
  store i64 %40, i64* %12, align 8, !noalias !5
  %41 = add i64 %22, 10
  store i64 %41, i64* @asm_sum.test, align 8, !noalias !5
  call void @NRT_decref(i8* %.51.fca.0.load)
  %.77 = call i8* @PyLong_FromLongLong(i64 %41)
  ret i8* %.77
}

declare i32 @PyArg_UnpackTuple(i8*, i8*, i64, i64, ...) local_unnamed_addr

; Function Attrs: nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #0

declare void @PyErr_SetString(i8*, i8*) local_unnamed_addr

declare i8* @PyNumber_Long(i8*) local_unnamed_addr

declare i64 @PyLong_AsLongLong(i8*) local_unnamed_addr

declare void @Py_DecRef(i8*) local_unnamed_addr

declare i8* @PyErr_Occurred() local_unnamed_addr

declare i32 @NRT_adapt_ndarray_from_python(i8* nocapture, i8* nocapture) local_unnamed_addr

declare i8* @PyLong_FromLongLong(i64) local_unnamed_addr

; Function Attrs: nounwind
declare noalias { i8* }* @fopen(i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, { i8* }* nocapture) local_unnamed_addr #0

; Function Attrs: nounwind
declare i32 @fclose({ i8* }* nocapture) local_unnamed_addr #1

declare i32 @PySys_WriteStdout(...) local_unnamed_addr #2

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: noinline
define linkonce_odr void @NRT_decref(i8* %.1) local_unnamed_addr #3 {
.3:
  %.4 = icmp eq i8* %.1, null
  br i1 %.4, label %.3.if, label %.3.endif, !prof !3

.3.if:                                            ; preds = %.3.endif, %.3
  ret void

.3.endif:                                         ; preds = %.3
  %.7 = bitcast i8* %.1 to i64*
  %.4.i = atomicrmw sub i64* %.7, i64 1 monotonic
  %.9 = icmp eq i64 %.4.i, 1
  br i1 %.9, label %.3.endif.if, label %.3.if, !prof !3

.3.endif.if:                                      ; preds = %.3.endif
  tail call void @NRT_MemInfo_call_dtor(i8* nonnull %.1)
  ret void
}

declare void @NRT_MemInfo_call_dtor(i8*) local_unnamed_addr

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #4

; Function Attrs: nounwind
declare void @llvm.stackprotector(i8*, i8**) #0

attributes #0 = { nounwind }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline }
attributes #4 = { argmemonly nounwind }

!llvm.ident = !{!0}
!llvm.module.flags = !{!1, !2}

!0 = !{!"clang version 6.0.0 (tags/RELEASE_600/final)"}
!1 = !{i32 1, !"wchar_size", i32 2}
!2 = !{i32 7, !"PIC Level", i32 2}
!3 = !{!"branch_weights", i32 1, i32 99}
!4 = !{!"branch_weights", i32 99, i32 1}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN8__main__7foo$241Ex5ArrayIxLi1E1C7mutable7alignedE: %retptr"}
!7 = distinct !{!7, !"_ZN8__main__7foo$241Ex5ArrayIxLi1E1C7mutable7alignedE"}
