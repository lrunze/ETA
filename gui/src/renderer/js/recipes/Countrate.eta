{"vi_templatejg7rpkiv":"{\"nodes\":[{\"x\":114,\"y\":140,\"fixed\":true,\"text\":\"a\",\"initial\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"0,1\"}],\"usercode\":\"HISTOGRAM(h1,(`bins`, `binsize`))\\nHISTOGRAM(h2,(`bins`, `binsize`))\\nCLOCK(c1)\\nCLOCK(c2)\\na--0-->a:\\n    c1.stop()\\n    h1.record(c1)\\na--1-->a:\\n    c2.stop()\\n    h2.record(c2)\"}","dpp_template_code":"#------IMPORTS-----\r\nfrom pathlib import Path\r\nimport numpy as np\r\n\r\ndef get_files(extensions):\r\n    global path\r\n    all_files = []\r\n    for ext in extensions:\r\n        all_files.extend(path.glob(ext))\r\n    return all_files\r\n\r\n#------ETA PROCESSING-----\r\nbinsize=int(binsize)\r\npath = Path(file)\r\ndatafolder='analyzed data'\r\n\r\nselector = (f for f in get_files(('*.ptu','*.timeres'))) if path.is_dir() else [path]\r\n\r\nfor f in selector:\r\n        cutfile = eta.simple_cut(f)\r\n        result=eta.run(cutfile, group='compile')\r\n        t1=result[\"h1\"]\r\n        t2=result[\"h2\"]\r\n        #hist1=np.sum(t1.reshape(-1, int(rebinsize)), axis=1) # apply extra binning (2343)\r\n        #hist2=np.sum(t2.reshape(-1, int(rebinsize)), axis=1)\r\n        \r\n        f.parent.joinpath(datafolder).mkdir(parents=True, exist_ok=True)\r\n        np.savetxt(f.parent.joinpath(datafolder, f.stem + '_countrate' +  '.txt'), np.transpose([np.arange(t1.size)/3600,t1,t2]))\r\n        eta.send(str(f.name) + ' has been successfully processed')\r\neta.send('FINISHED')","eta_index_table":"[{\"id\":\"var_templatejkimp1dz\",\"name\":\"file\",\"group\":\"compile\",\"info\":\"\",\"config\":\"C:/YourFolder/YourFile.timetag\"},{\"id\":\"var_templatejkimp6ts\",\"name\":\"binsize\",\"group\":\"compile\",\"info\":\"\",\"config\":\"1000000000000\"},{\"id\":\"var_templatejkimp49t\",\"name\":\"bins\",\"group\":\"compile\",\"info\":\"\",\"config\":\"14400\"},{\"id\":\"var_templatejkimq3l9\",\"name\":\"rebinsize\",\"group\":\"compile\",\"info\":\"\",\"config\":\"1\"},{\"id\":\"dpp_templatejgmfaujq\",\"name\":\"plotly\",\"group\":\"compile\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatejgmfdvub\",\"name\":\"bokeh\",\"group\":\"compile\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_template_code\",\"name\":\"txt_saver\",\"group\":\"compile\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatejgxmbufn\",\"name\":\"graph_saver\",\"group\":\"compile\",\"info\":\"\",\"config\":\"\"},{\"id\":\"ri_templatejkimu3sj\",\"name\":\"Time Tagger\",\"group\":\"compile\",\"info\":\"ðŸ“¤ [0, 1]\",\"config\":\"[2,0]\"},{\"id\":\"vi_templatejg7rpkiv\",\"name\":\"countrate\",\"group\":\"compile\",\"info\":\"ðŸ“¥ [0, 1], ðŸ“¤ [] \",\"config\":\"\"}]","dpp_templatejgmfaujq":"#------IMPORTS-----\r\nimport numpy as np\r\nimport dash\r\nimport dash_core_components as dcc\r\nimport dash_html_components as html\r\nimport plotly.graph_objs as go\r\n\r\n#------ETA PROCESSING-----\r\ncut=eta.simple_cut(file)\r\nresult= eta.run(cut, group='compile')\r\nbinsize=int(binsize)\r\nhist1=np.sum(result[\"h1\"].reshape(-1, int(rebinsize)), axis=1) # apply extra binning\r\nhist2=np.sum(result[\"h2\"].reshape(-1, int(rebinsize)), axis=1)\r\n\r\n#------PLOTTING-----\r\napp = dash.Dash()\r\napp.layout = html.Div(children=[\r\n    html.H1(children=file),\r\n    dcc.Graph(\r\n        id='countrate',\r\n        figure={\r\n            'data': [\r\n                {\r\n                    'x': np.arange(hist1.size)/3600, \r\n                    'y': hist1,\r\n                    'type': 'bar',\r\n                    'name': 'bwd',\r\n                    'marker': {\r\n                        'color': '#0571b0'\r\n                    }\r\n                    \r\n                },\r\n                {\r\n                    'x': np.arange(hist2.size)/3600, \r\n                    'y': hist2,\r\n                    'type': 'bar',\r\n                    'name': 'bwd',\r\n                    'marker': {\r\n                        'color': '#ca0020'\r\n                    }\r\n                    \r\n                },\r\n            ],\r\n            'layout': {\r\n                'autosize':True,\r\n                'title': file,\r\n                'barmode': 'stack',\r\n                'xaxis' : {'title' : 'Time Delay (ps)'},\r\n                'yaxis' : {'title' : 'Coincidence Events'}\r\n            }\r\n        },\r\n        style={ \"height\" : \"100vh\"}\r\n    )\r\n], style={ \"height\" : \"100vh\"})\r\neta.display(app)","dpp_templatejgmfdvub":"#------IMPORTS-----\r\nimport numpy as np\r\nresult = eta.run(file)\r\nt1= result[\"h1\"]\r\nt2=result[\"h2\"]\r\nbinsize=int(binsize) # accept bin size variable from left panel\r\nhist1=np.sum(t1.reshape(-1, int(rebinsize)), axis=1) # apply extra binning (2343)\r\nhist2=np.sum(t2.reshape(-1, int(rebinsize)), axis=1)\r\ndef modify_doc(doc):\r\n    global hist1, hist2\r\n    from bokeh.layouts import column\r\n    from bokeh.models import ColumnDataSource, Slider\r\n    from bokeh.plotting import figure\r\n    from bokeh.server.server import Server\r\n    from bokeh.themes import Theme\r\n    import numpy as np\r\n\r\n    p1 = figure(title=\"Powermeter mode\",\r\n            background_fill_color=\"white\")\r\n    p1.line(np.arange(hist1.size), hist1, line_color=\"black\", line_width=2, alpha=0.7, legend=\"CDF\")\r\n    \r\n    def callback(attr, old, new):\r\n        print(\"callback called\")\r\n\r\n    slider = Slider(start=0, end=30, value=0, step=1, title=\"Smoothing by N Days\")\r\n    slider.on_change('value', callback)\r\n\r\n    doc.add_root(column(slider, p1))\r\n\r\neta.display(modify_doc)\r\n","dpp_templatejgxmbufn":"#------IMPORTS-----\r\nfrom pathlib import Path\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\ndef get_files(extensions):\r\n    global path\r\n    all_files = []\r\n    for ext in extensions:\r\n        all_files.extend(path.glob(ext))\r\n    return all_files\r\n\r\n#------ETA PROCESSING-----\r\nbinsize=int(binsize)\r\npath = Path(file)\r\ngraphsfolder='graphs'\r\n\r\nselector = (f for f in get_files(('*.ptu','*.timeres'))) if path.is_dir() else [path]\r\n\r\nfor f in selector:\r\n        cutfile = eta.simple_cut(f)\r\n        result=eta.run(cutfile, group='compile')\r\n        t1=result[\"h1\"]\r\n        t2=result[\"h2\"]\r\n        #hist1=np.sum(t1.reshape(-1, int(rebinsize)), axis=1) # apply extra binning (2343)\r\n        #hist2=np.sum(t2.reshape(-1, int(rebinsize)), axis=1)\r\n        \r\n        x = np.arange(t1.size)/3600 #display in h\r\n        \r\n        p1 = plt.bar(x,t1, width=1/3600, color='crimson')\r\n        p2 = plt.bar(x,t2, width=1/3600, bottom= t1, color='navy')\r\n        \r\n        plt.ylabel('photon events')\r\n        plt.xlabel('time (h)')\r\n        \r\n        \r\n        list_of_title=str(f.stem).split('_')[:-1]\r\n        title='   '.join(list_of_title)\r\n        plt.title(title)\r\n        \r\n        f.parent.joinpath(graphsfolder).mkdir(parents=True, exist_ok=True)\r\n        plt.savefig(f.parent.joinpath(graphsfolder, f.stem + '_countrate' +  '.eps'), format='eps', dpi=1200)\r\n        plt.savefig(f.parent.joinpath(graphsfolder, f.stem + '_countrate' +  '.png'), format='png', dpi=1200)\r\n        \r\n        plt.clf()\r\n        \r\n        eta.send(str(f.name) + ' has been successfully processed')\r\neta.send('FINISHED')","var_templatejkimp1dz":null,"var_templatejkimp49t":null,"var_templatejkimp6ts":null,"var_templatejkimq3l9":null,"ri_templatejkimu3sj":null}