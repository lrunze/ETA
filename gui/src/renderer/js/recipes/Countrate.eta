{"vi_templatejg7rpkiv":"{\"nodes\":[{\"x\":114,\"y\":140,\"fixed\":true,\"text\":\"a\",\"initial\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"0,1\"}],\"usercode\":\"HISTOGRAM(h1,(`bins`, `binsize`))\\nHISTOGRAM(h2,(`bins`, `binsize`))\\nCLOCK(c1)\\nCLOCK(c2)\\na--0-->a:\\n    c1.stop()\\n    h1.record(c1)\\na--1-->a:\\n    c2.stop()\\n    h2.record(c2)\"}","dpp_template_code":"#------IMPORTS-----\r\nfrom pathlib import Path\r\nimport numpy as np\r\n\r\ndef get_files(extensions):\r\n    global path\r\n    all_files = []\r\n    for ext in extensions:\r\n        all_files.extend(path.glob(ext))\r\n    return all_files\r\n\r\n#------ETA PROCESSING-----\r\nbinsize=int(float(binsize))\r\npath = Path(file)\r\ndatafolder='analyzed data'\r\n\r\nselector = (f for f in get_files(('*.ptu','*.timeres'))) if path.is_dir() else [path]\r\n\r\nfor f in selector:\r\n        cutfile = eta.clips(f)\r\n        result=eta.run(cutfile, group='compile')\r\n        t1=result[\"h1\"]\r\n        t2=result[\"h2\"]\r\n        #hist1=np.sum(t1.reshape(-1, int(float(rebinsize))), axis=1) # apply extra binning (2343)\r\n        #hist2=np.sum(t2.reshape(-1, int(float(rebinsize))), axis=1)\r\n        \r\n        f.parent.joinpath(datafolder).mkdir(parents=True, exist_ok=True)\r\n        np.savetxt(f.parent.joinpath(datafolder, f.stem + '_countrate' +  '.txt'), np.transpose([np.arange(t1.size)/3600,t1,t2]))\r\n        eta.send(str(f.name) + ' has been successfully processed')\r\neta.send('FINISHED')","eta_index_table":"[{\"id\":\"var_templatejkimp1dz\",\"name\":\"file\",\"group\":\"compile\",\"info\":\"\",\"config\":\"C:/YourFolder/YourFile.timetag\"},{\"id\":\"var_templatejkimp6ts\",\"name\":\"binsize\",\"group\":\"compile\",\"info\":\"\",\"config\":\"1e12\"},{\"id\":\"var_templatejkimp49t\",\"name\":\"bins\",\"group\":\"compile\",\"info\":\"\",\"config\":\"14400\"},{\"id\":\"var_templatejkimq3l9\",\"name\":\"rebinsize\",\"group\":\"compile\",\"info\":\"\",\"config\":\"1\"},{\"id\":\"dpp_templatejgmfaujq\",\"name\":\"plotly\",\"group\":\"compile\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatejgmfdvub\",\"name\":\"bokeh\",\"group\":\"compile\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_template_code\",\"name\":\"txt_saver\",\"group\":\"compile\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatejgxmbufn\",\"name\":\"graph_saver\",\"group\":\"compile\",\"info\":\"\",\"config\":\"\"},{\"id\":\"ri_templatejkimu3sj\",\"name\":\"Time Tagger\",\"group\":\"compile\",\"info\":\"ðŸ“¤ [0, 1]\",\"config\":\"[2,0]\"},{\"id\":\"vi_templatejg7rpkiv\",\"name\":\"countrate\",\"group\":\"compile\",\"info\":\"ðŸ“¥ [0, 1], ðŸ“¤ [] \",\"config\":\"\"}]","dpp_templatejgmfaujq":"#------IMPORTS-----\r\nimport numpy as np\r\nimport dash\r\nimport dash_core_components as dcc\r\nimport dash_html_components as html\r\nimport plotly.graph_objs as go\r\n\r\n#------ETA PROCESSING-----\r\ncut=eta.clips(file)\r\nresult= eta.run(cut, group='compile')\r\nbinsize=int(float(binsize))\r\nhist1=np.sum(result[\"h1\"].reshape(-1, int(float(rebinsize))), axis=1) # apply extra binning\r\nhist2=np.sum(result[\"h2\"].reshape(-1, int(float(rebinsize))), axis=1)\r\n\r\n#------PLOTTING-----\r\napp = dash.Dash()\r\napp.layout = html.Div(children=[\r\n    html.H1(children=file),\r\n    dcc.Graph(\r\n        id='countrate',\r\n        figure={\r\n            'data': [\r\n                {\r\n                    'x': np.arange(hist1.size)/3600, \r\n                    'y': hist1,\r\n                    'type': 'bar',\r\n                    'name': 'bwd',\r\n                    'marker': {\r\n                        'color': '#0571b0'\r\n                    }\r\n                    \r\n                },\r\n                {\r\n                    'x': np.arange(hist2.size)/3600, \r\n                    'y': hist2,\r\n                    'type': 'bar',\r\n                    'name': 'bwd',\r\n                    'marker': {\r\n                        'color': '#ca0020'\r\n                    }\r\n                    \r\n                },\r\n            ],\r\n            'layout': {\r\n                'autosize':True,\r\n                'title': file,\r\n                'barmode': 'stack',\r\n                'xaxis' : {'title' : 'Time Delay (ps)'},\r\n                'yaxis' : {'title' : 'Coincidence Events'}\r\n            }\r\n        },\r\n        style={ \"height\" : \"100vh\"}\r\n    )\r\n], style={ \"height\" : \"100vh\"})\r\neta.display(app)","dpp_templatejgmfdvub":"#------IMPORTS-----\nimport numpy as np\ncut = eta.clips(file)\nresult = eta.run(cut, group='compile')\nt1 = result[\"h1\"]\nt2 = result[\"h2\"]\nbinsize = int(float(1e12)) # accept bin size variable from left panel\nhist1 = np.sum(t1.reshape(-1, int(float(rebinsize))), axis=1) # apply extra binning (2343)\nhist2 = np.sum(t2.reshape(-1, int(float(rebinsize))), axis=1)\n\n\ndef modify_doc(doc):\n    global hist1, hist2, binsize\n    from bokeh.layouts import column\n    from bokeh.models import ColumnDataSource, Slider\n    from bokeh.plotting import figure\n    from bokeh.server.server import Server\n    from bokeh.themes import Theme\n    import numpy as np\n    import pandas as pd\n    \n    xdata = np.arange(0,hist1.size)/60\n    ydata = hist1\n    ydata2 = hist2\n    print(xdata)\n    df = pd.DataFrame(np.vstack((xdata, ydata, ydata2)).T, columns=['time bins', 'ch1', 'ch2'])\n    df['zero'] = int(len(df['time bins'].values))*[0]\n    \n    #stacked DataFrame can be used for plotting several channels with one plot command\n    #sdf = df.set_index('time bins').stack().reset_index().rename(columns={\"level_1\": \"ch\", 0: \"value\"})\n    #sdf['color'] = int(len(sdf['time bins'].values)/2)*['firebrick', 'navy']#['#599ad3','#f9a65a']\n\n    source = ColumnDataSource(df)\n\n    def style(p):\n        from bokeh.models import DataRange1d\n        # Title \n        p.title.align = 'center'\n        p.title.text_font_size = '20pt'\n        p.title.text_font = 'serif'\n\n        # Axis titles\n        p.xaxis.axis_label_text_font_size = '14pt'\n        p.xaxis.axis_label_text_font_style = 'bold'\n        p.yaxis.axis_label_text_font_size = '14pt'\n        p.yaxis.axis_label_text_font_style = 'bold'\n\n        # Tick labels\n        p.xaxis.major_label_text_font_size = '12pt'\n        p.yaxis.major_label_text_font_size = '12pt'\n        \n        # limit data range\n        p.x_range = DataRange1d(0, int(len(df['time bins'].values)), bounds=(0,None))\n        p.y_range = DataRange1d(0, max(df[['ch1','ch2']].max(axis=0).values)*1.2, bounds=(0,None))\n        \n        # remove padding\n        p.min_border_bottom = 0\n        p.min_border_left = 0\n        p.x_range.range_padding = 0\n        p.y_range.range_padding = 0\n        \n        return p\n\n\n\n    def make_plot(src):\n        from  bokeh.models.tools import HoverTool\n        hover=HoverTool(tooltips = [\n                    (\"Delay: \", \"@{time bins}\"),\n                    (\"Ch1\", \"@ch1\"),\n                    (\"Ch2\", \"@ch2\"),\n                    ],\n                    mode='vline', point_policy = \"snap_to_data\",\n                    line_policy = \"nearest\"\n                )\n        toolbox = \"pan,wheel_zoom,box_zoom,reset\"\n        # Blank plot with correct labels\n        p = figure(plot_width = 700, plot_height = 700, tools=toolbox, \n                  title = 'Correlation Histogram',\n                  x_axis_label = 'Time delay (min)', y_axis_label = 'Histogram events')\n        p.add_tools(hover)\n\n#        p.varea(x='time bins', y1='ch1', y2='zero', fill_alpha=0.5, \n#                source=src, color='firebrick', legend_label='ch1'\n#                )\n#        p.varea(x='time bins', y1='ch2', y2='zero', fill_alpha=0.5, \n#                source=src, color='navy', legend_label='ch2'\n#                )\n        \n        p.line(x='time bins', y='ch1', \n                source=src, color='firebrick', legend_label='ch1'\n                )\n        p.line(x='time bins', y='ch2', \n                source=src, color='navy', legend_label='ch2'\n                )\n\n        p.legend.location = \"top_right\"\n        p.legend.click_policy=\"hide\"\n        # Styling\n        p = style(p)\n\n\n        return p\n\n\n    p = make_plot(source)\n\n    doc.add_root(column(p))\n\neta.display(modify_doc)\n","dpp_templatejgxmbufn":"#------IMPORTS-----\r\nfrom pathlib import Path\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\ndef get_files(extensions):\r\n    global path\r\n    all_files = []\r\n    for ext in extensions:\r\n        all_files.extend(path.glob(ext))\r\n    return all_files\r\n\r\n#------ETA PROCESSING-----\r\nbinsize=int(float(binsize))\r\npath = Path(file)\r\ngraphsfolder='graphs'\r\n\r\nselector = (f for f in get_files(('*.ptu','*.timeres'))) if path.is_dir() else [path]\r\n\r\nfor f in selector:\r\n        cutfile = eta.clips(f)\r\n        result=eta.run(cutfile, group='compile')\r\n        t1=result[\"h1\"]\r\n        t2=result[\"h2\"]\r\n        #hist1=np.sum(t1.reshape(-1, int(float(rebinsize))), axis=1) # apply extra binning (2343)\r\n        #hist2=np.sum(t2.reshape(-1, int(float(rebinsize))), axis=1)\r\n        \r\n        x = np.arange(t1.size)/3600 #display in h\r\n        \r\n        p1 = plt.bar(x,t1, width=1/3600, color='crimson')\r\n        p2 = plt.bar(x,t2, width=1/3600, bottom= t1, color='navy')\r\n        \r\n        plt.ylabel('photon events')\r\n        plt.xlabel('time (h)')\r\n        \r\n        \r\n        list_of_title=str(f.stem).split('_')[:-1]\r\n        title='   '.join(list_of_title)\r\n        plt.title(title)\r\n        \r\n        f.parent.joinpath(graphsfolder).mkdir(parents=True, exist_ok=True)\r\n        plt.savefig(f.parent.joinpath(graphsfolder, f.stem + '_countrate' +  '.eps'), format='eps', dpi=1200)\r\n        plt.savefig(f.parent.joinpath(graphsfolder, f.stem + '_countrate' +  '.png'), format='png', dpi=1200)\r\n        \r\n        plt.clf()\r\n        \r\n        eta.send(str(f.name) + ' has been successfully processed')\r\neta.send('FINISHED')","var_templatejkimp1dz":null,"var_templatejkimp49t":null,"var_templatejkimp6ts":null,"var_templatejkimq3l9":null,"ri_templatejkimu3sj":null}