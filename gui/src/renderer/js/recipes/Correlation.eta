{"ri_templatejezi0bbr":null,"vi_templatejg59migx":"{\"nodes\":[{\"x\":101,\"y\":101,\"fixed\":true,\"text\":\"a\",\"px\":101,\"py\":101,\"initial\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"1\"}],\"usercode\":\"a:\\n    emit(4,0)# here, ch1 is duplicated to ch3 with a delay of 0ps\"}","vi_templatejfc9koma":"{\"nodes\":[{\"x\":82,\"y\":88,\"fixed\":true,\"text\":\"a\",\"px\":82,\"py\":88,\"initial\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"0\"}],\"usercode\":\"a:\\n    emit(3,0)# here, ch0 is duplicated to ch2 with a delay of 0ps\"}","vi_templatejg52ksbp":"{\"nodes\":[{\"x\":346,\"y\":111,\"fixed\":true,\"text\":\"start\",\"px\":346,\"py\":111},{\"x\":95,\"y\":102,\"fixed\":true,\"text\":\"stop\",\"px\":95,\"py\":102,\"initial\":true}],\"edges\":[{\"source\":0,\"target\":1,\"text\":\"4\"},{\"source\":1,\"target\":0,\"text\":\"3\"},{\"source\":0,\"target\":0,\"text\":\"3\"},{\"source\":1,\"target\":1,\"text\":\"4\"}],\"usercode\":\"HISTOGRAM(h3,(`bins`,`binsize`))\\nCLOCK(c3,100,1)\\nstart:\\n    c3.start()\\nstop:\\n    c3.stop()\\n    h3.record_all(c3)\"}","vi_templatejfb2qshf":"{\"nodes\":[{\"x\":346,\"y\":111,\"fixed\":true,\"text\":\"start\",\"px\":346,\"py\":111},{\"x\":102,\"y\":102,\"fixed\":true,\"text\":\"stop\",\"px\":102,\"py\":102,\"initial\":true}],\"edges\":[{\"source\":0,\"target\":1,\"text\":\"3\"},{\"source\":1,\"target\":0,\"text\":\"4\"},{\"source\":0,\"target\":0,\"text\":\"4\"},{\"source\":1,\"target\":1,\"text\":\"3\"}],\"usercode\":\"HISTOGRAM(h4,(`bins`,`binsize`))\\nCLOCK(c4,100,1)\\nstart:\\n    c4.start()\\nstop:\\n    c4.stop()\\n    h4.record_all(c4)\"}","dpp_template_code":"#------IMPORTS-----\r\nfrom pathlib import Path\r\nimport numpy as np\r\n\r\nimport dash\r\nimport dash_core_components as dcc\r\nimport dash_html_components as html\r\nimport plotly.graph_objs as go\r\n#------ETA PROCESSING-----\r\n\r\ncut=eta.simple_cut(Path(file), 4)\r\nresult= eta.run(cut, group='HHT3')\r\nhist1=result[\"h3\"]\r\nhist2=result[\"h4\"]\r\n\r\nfullhist=np.concatenate((np.flip(hist2, 0), hist1), axis=0)\r\n#------PLOTTING-----\r\napp = dash.Dash()\r\napp.layout = html.Div(children=[\r\n    dcc.Graph(\r\n        id='example-ss',\r\n        figure={\r\n            'data': [\r\n                {\r\n                    'x': np.arange(-hist2.size,hist1.size)*int(float(binsize)), \r\n                    'y': fullhist,\r\n                    'type': 'bar',\r\n                    'name': 'bwd',\r\n                    'marker': {\r\n                        'color': '#0571b0'\r\n                    }\r\n                    \r\n                },\r\n            ],\r\n            'layout': {\r\n                'autosize':True,\r\n                'title': 'Start Stop Measurement',\r\n                'barmode': 'stack',\r\n                'xaxis' : {'title' : 'Time Delay (ps)'},\r\n                'yaxis' : {'title' : 'Coincidence Events'}\r\n            }\r\n        },\r\n        style={ \"height\" : \"100vh\"}\r\n    )\r\n], style={ \"height\" : \"100vh\"})\r\neta.display(app)","eta_index_table":"[{\"id\":\"var_templatejgmgopco\",\"name\":\"file\",\"group\":\"HHT2,HHT3, quTAG, general\",\"info\":\"\",\"config\":\"C:/YourFolder/YourFile.timeres\"},{\"id\":\"var_templatejkim8l39\",\"name\":\"binsize\",\"group\":\"HHT2,HHT3, quTAG, general\",\"info\":\"\",\"config\":\"16\"},{\"id\":\"var_templatejkim8rzm\",\"name\":\"expname\",\"group\":\"HHT2,HHT3, quTAG\",\"info\":\"\",\"config\":\"Correlation\"},{\"id\":\"var_templatejkim8w21\",\"name\":\"bins\",\"group\":\"HHT2,HHT3, quTAG\",\"info\":\"\",\"config\":\"10000\"},{\"id\":\"var_templatejkim95ub\",\"name\":\"plotsize_x\",\"group\":\"general\",\"info\":\"\",\"config\":\"3200\"},{\"id\":\"var_templatejrvu8s5g\",\"name\":\"analyze_timewindow\",\"group\":\"general\",\"info\":\"\",\"config\":\"True\"},{\"id\":\"dpp_templatek0e4fe69\",\"name\":\"plotly (HHT2)\",\"group\":\"HHT2\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_template_code\",\"name\":\"plotly (HHT3)\",\"group\":\"HHT3\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatek0e4feyu\",\"name\":\"plotly (quTAG)\",\"group\":\"quTAG\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatek0e4ffk5\",\"name\":\"create txt (HHT2)\",\"group\":\"HHT2\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatejgqnmykj\",\"name\":\"create txt (HHT3)\",\"group\":\"HHT3\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatek0e4ffxo\",\"name\":\"create txt (quTAG)\",\"group\":\"quTAG\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatejgs3h609\",\"name\":\"txt 2 graph (zoom-in)\",\"group\":\"general\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatejgs1c21d\",\"name\":\"txt 2 g2 analysis and graph\",\"group\":\"general\",\"info\":\"\",\"config\":\"\"},{\"id\":\"ri_templatejezi0bbr\",\"name\":\"HH400\",\"group\":\"HHT2,HHT3\",\"info\":\"📤 [0, 1, 2]\",\"config\":\"[3,0]\"},{\"id\":\"ri_templatek0e3jjea\",\"name\":\"quTAG\",\"group\":\"quTAG\",\"info\":\"📤 [0, 1, 2, 3, 4, 5]\",\"config\":\"[6,0]\"},{\"id\":\"vi_templatek0e44hsk\",\"name\":\"DL1-3 (HHT2)\",\"group\":\"HHT2\",\"info\":\"📥 [1], 📤 [3] \",\"config\":\"\"},{\"id\":\"vi_templatek0e44v54\",\"name\":\"DL2-4 (HHT2)\",\"group\":\"HHT2\",\"info\":\"📥 [2], 📤 [4] \",\"config\":\"\"},{\"id\":\"vi_templatejfc9koma\",\"name\":\"DL0-3 (HHT3)\",\"group\":\"HHT3\",\"info\":\"📥 [0], 📤 [3] \",\"config\":\"\"},{\"id\":\"vi_templatejg59migx\",\"name\":\"DL1-4 (HHT3)\",\"group\":\"HHT3\",\"info\":\"📥 [1], 📤 [4] \",\"config\":\"\"},{\"id\":\"vi_templatejg52ksbp\",\"name\":\"Correlationbwd (HH400)\",\"group\":\"HHT2,HHT3\",\"info\":\"📥 [4, 3], 📤 [] \",\"config\":\"\"},{\"id\":\"vi_templatejfb2qshf\",\"name\":\"Correlationfwd  (HH400)\",\"group\":\"HHT2,HHT3\",\"info\":\"📥 [3, 4], 📤 [] \",\"config\":\"\"},{\"id\":\"vi_templatek0e3lgeo\",\"name\":\"DL1-6  (quTAG)\",\"group\":\"quTAG\",\"info\":\"📥 [1], 📤 [6] \",\"config\":\"\"},{\"id\":\"vi_templatek0e3lz43\",\"name\":\"DL2-7 (quTAG)\",\"group\":\"quTAG\",\"info\":\"📥 [2], 📤 [7] \",\"config\":\"\"},{\"id\":\"vi_templatek0e3qybt\",\"name\":\"Correlationbwd (quTAG)\",\"group\":\"quTAG\",\"info\":\"📥 [7, 6], 📤 [] \",\"config\":\"\"},{\"id\":\"vi_templatek0e3sowi\",\"name\":\"Correlationfwd (quTAG)\",\"group\":\"quTAG\",\"info\":\"📥 [6, 7], 📤 [] \",\"config\":\"\"}]","var_templatejgmgopco":null,"dpp_templatejgqnmykj":"#------IMPORTS-----\r\nfrom pathlib import Path\r\nimport numpy as np\r\n\r\ndef get_files(extensions):\r\n    global path\r\n    all_files = []\r\n    for ext in extensions:\r\n        all_files.extend(path.glob(ext))\r\n    return all_files\r\n\r\n#------ETA PROCESSING-----\r\nbinsize=int(float(binsize))\r\npath = Path(file)\r\ndatafolder='analyzed data'\r\n\r\nselector = (f for f in get_files(('*.ptu','*.timeres'))) if path.is_dir() else [path]\r\n\r\nfor f in selector:\r\n        cutfile = eta.simple_cut(f,4)\r\n        result=eta.run(cutfile, group='HHT3')\r\n        t1=result[\"h3\"]\r\n        t2=result[\"h4\"] \r\n        fullhist=np.concatenate((np.flip(t2, 0), t1), axis=0)\r\n        f.parent.joinpath(datafolder).mkdir(parents=True, exist_ok=True)\r\n        np.savetxt(f.parent.joinpath(datafolder, f.stem + '_correlation' +  '.txt'), np.transpose([np.arange(-t2.size,t1.size)*binsize,fullhist]))\r\n        eta.send(str(f.name) + ' has been successfully processed')\r\neta.send('FINISHED')\r\n\r\n","dpp_templatejgs1c21d":"#------IMPORTS-----\r\nfrom pathlib import Path\r\n\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\nimport matplotlib.pyplot as plt\r\n\r\ndef get_files(extensions):\r\n    global path, datafolder\r\n    path=path.joinpath(datafolder)\r\n    all_files = []\r\n    for ext in extensions:\r\n        all_files.extend(path.glob(ext))\r\n    return all_files\r\n\r\nanalyze_timewindow = bool(analyze_timewindow)\r\n\r\n#------ETA PROCESSING-----\r\ndatafolder='analyzed data'\r\ngraphsfolder='graphs'\r\npath = Path(file)\r\n\r\nif path.is_dir():\r\n    selector = get_files(('*.txt',))\r\nelse:\r\n    if path.suffix == '.txt':\r\n        selector = [path]\r\n    else:\r\n        selector = [path.parent.joinpath(datafolder, path.stem + '_correlation' + '.txt')]\r\n\r\nfor f in selector:\r\n        list_of_title=f.stem.split('_')\r\n\r\n        data=pd.read_table(f, header=None, names=['ps', 'cnts'], sep=' ')\r\n        data.set_index('ps', inplace=True)\r\n        data = data['cnts']\r\n        \r\n        numberofsidepeaks = 8 # must be even\r\n        bin=16\r\n        shift = 0\r\n        widthofdata = 120000 #how the data is going to be cut. Allow enough ps to accomodate the numberofsidepeaks\r\n        leftend = int(-widthofdata/2+shift)\r\n        rightend = int(widthofdata/2+shift)\r\n        lessthanrep = 12300 #less than the laser repetition rate in ps\r\n        \r\n        reprate = int(((data.loc[rightend-lessthanrep:rightend].idxmax()-data.loc[leftend:leftend+lessthanrep].idxmax())/int(numberofsidepeaks)))\r\n        \r\n        g2vsdT = pd.DataFrame()\r\n        for window in range(bin, lessthanrep, bin):\r\n            peaks = np.array([])\r\n            \r\n            for x in range(int(data.loc[leftend:leftend+reprate].idxmax()), rightend, reprate):\r\n                temp0=data.loc[x-window/2:x+window/2].sum()\r\n                peaks=np.append([peaks], [temp0])\r\n        \r\n            center = peaks[int(numberofsidepeaks/2)]\r\n            average = np.mean([peaks[:int(numberofsidepeaks/2)], peaks[1+int(numberofsidepeaks/2):]])\r\n            average_err = (np.sqrt(np.sum([peaks[:int(numberofsidepeaks/2)], peaks[1+int(numberofsidepeaks/2):]]))/int(numberofsidepeaks))\r\n            g2 = center/average\r\n            g2_err = np.sqrt(center/(average**2)+(average_err**2)*(peaks[int(numberofsidepeaks/2)]**2)/average**4)\r\n            \r\n            if window == 1600:\r\n                print('Time window: '+str(window)+' ps'+'\\n'+'average counts per peak: '+str(average) + ' pm ' + str(average_err) + '\\n' + 'g2: '+ str(g2)+ ' pm ' + str(g2_err)+'\\n'+'center peak delay: ' + str(reprate*(numberofsidepeaks/2)+data.loc[leftend:leftend+lessthanrep].idxmax())+' ps' +'\\n'+'pulse delay: '+str(reprate)+' ps')\r\n                center_peak_delay = reprate*(numberofsidepeaks/2)+data.loc[leftend:leftend+lessthanrep].idxmax()\r\n                good_average = average\r\n                good_average_err = average_err\r\n                good_g2 = g2\r\n                good_g2_err = g2_err\r\n            temp1 = pd.DataFrame([[window, g2, g2_err]], columns=['Time Window', 'g(2)', 'delta g(2)'])\r\n            g2vsdT = pd.concat([g2vsdT, temp1], ignore_index=True)\r\n        \r\n        \r\n        g2vsdT.set_index('Time Window', inplace=True)\r\n        g2vsdT = pd.concat([g2vsdT, g2vsdT['g(2)']+g2vsdT['delta g(2)'], g2vsdT['g(2)']-g2vsdT['delta g(2)']], axis=1)\r\n        g2vsdT.rename(columns={0:'err+', 1:'err-'}, inplace=True)\r\n        \r\n        title='average counts per peak: '+str(int(good_average)) + r' $\\pm$ ' + str(int(good_average_err)) + '\\n' + 'g2: '+  \"{0:.6f}\".format(good_g2) + r' $\\pm$ ' + \"{0:.6f}\".format(good_g2_err)\r\n        data = data.loc[leftend:rightend]\r\n        p1 = plt.bar(data.index,data, width=bin, color='salmon', log=True)\r\n\r\n        plt.ylabel('correlation events')\r\n        plt.xlabel('time (ps)')\r\n        plt.title(title)\r\n        f.parent.parent.joinpath(graphsfolder).mkdir(parents=True, exist_ok=True)\r\n        plt.savefig(f.parent.parent.joinpath(graphsfolder, f.stem + '_analyzed' + '.eps'), format='eps', dpi=1200)\r\n        plt.savefig(f.parent.parent.joinpath(graphsfolder, f.stem + '_analyzed' + '.png'), format='png', dpi=1200)\r\n        plt.clf()\r\n        \r\n        if analyze_timewindow == True:\r\n            plt.plot(g2vsdT.index, g2vsdT['g(2)'], 'b')\r\n            plt.fill_between(g2vsdT.index, g2vsdT['err+'], g2vsdT['err-'], color='b', alpha=0.2)\r\n            plt.ylabel('g2(0)')\r\n            plt.xlabel('analysis window (ps)')\r\n            plt.savefig(f.parent.parent.joinpath(graphsfolder, f.stem + '_windows' + '.eps'), format='eps', dpi=1200)\r\n            plt.savefig(f.parent.parent.joinpath(graphsfolder, f.stem + '_windows' + '.png'), format='png', dpi=1200)\r\n            plt.clf()","dpp_templatejgs3h609":"#------IMPORTS-----\r\nfrom pathlib import Path\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\ndef get_files(extensions):\r\n    global path, datafolder\r\n    path=path.joinpath(datafolder)\r\n    all_files = []\r\n    for ext in extensions:\r\n        all_files.extend(path.glob(ext))\r\n    return all_files\r\n\r\n#------ETA PROCESSING-----\r\ngraphsfolder='graphs'\r\ndatafolder='analyzed data'\r\npath = Path(file)\r\n\r\nif path.is_dir():\r\n    selector = get_files(('*.txt',))\r\nelse:\r\n    if path.suffix == '.txt':\r\n        selector = [path]\r\n    else:\r\n        selector = [path.parent.joinpath(datafolder, path.stem + '_correlation' + '.txt')]\r\n\r\nplotsize_x=int(plotsize_x)\r\nbinsize=int(float(binsize))\r\n\r\nfor f in selector:\r\n        print(f.stem)\r\n        data=np.loadtxt(f)\r\n        read_bins=len(np.transpose(data)[0])\r\n        p1 = plt.bar(data[int((read_bins-plotsize_x/binsize)/2):int((read_bins+plotsize_x/binsize)/2),0], data[int((read_bins-plotsize_x/binsize)/2):int((read_bins+plotsize_x/binsize)/2),1],width=binsize, color='#0088ff')\r\n        plt.ylabel('events')\r\n        plt.xlabel('time (ps)')\r\n        f.parent.parent.joinpath(graphsfolder).mkdir(parents=True, exist_ok=True)\r\n        plt.savefig(f.parent.parent.joinpath(graphsfolder, f.stem + '_inset' + '.eps'), format='eps', dpi=1200)\r\n        plt.savefig(f.parent.parent.joinpath(graphsfolder, f.stem + '_inset' + '.png'), format='png', dpi=1200)\r\n        plt.clf()\r\n        eta.send(f.name + ' has been successfully plotted')","var_templatejkim8l39":null,"var_templatejkim8rzm":null,"var_templatejkim8w21":null,"var_templatejkim95ub":null,"var_templatejrvu8s5g":null,"ri_templatek0e3jjea":null,"vi_templatek0e3lgeo":"{\"nodes\":[{\"x\":121,\"y\":114,\"fixed\":true,\"text\":\"a\",\"initial\":true,\"px\":121,\"py\":114}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"1\"}],\"usercode\":\"a:\\n    emit(6,0)\"}","vi_templatek0e3lz43":"{\"nodes\":[{\"x\":89,\"y\":107,\"fixed\":true,\"initial\":true,\"text\":\"a\"}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"2\"}],\"usercode\":\"a:\\n    emit(7,0)\"}","vi_templatek0e3qybt":"{\"nodes\":[{\"x\":346,\"y\":111,\"fixed\":true,\"text\":\"start\",\"px\":346,\"py\":111},{\"x\":75,\"y\":86,\"fixed\":true,\"text\":\"stop\",\"px\":75,\"py\":86,\"initial\":true}],\"edges\":[{\"source\":0,\"target\":1,\"text\":\"7\"},{\"source\":1,\"target\":0,\"text\":\"6\"},{\"source\":0,\"target\":0,\"text\":\"6\"},{\"source\":1,\"target\":1,\"text\":\"7\"}],\"usercode\":\"HISTOGRAM(h3,(`bins`,`binsize`))\\nCLOCK(c3,100,1)\\nstart:\\n    c3.start()\\nstop:\\n    c3.stop()\\n    h3.record_all(c3)\"}","vi_templatek0e3sowi":"{\"nodes\":[{\"x\":346,\"y\":111,\"fixed\":true,\"text\":\"start\",\"px\":346,\"py\":111},{\"x\":76,\"y\":88,\"fixed\":true,\"text\":\"stop\",\"px\":76,\"py\":88,\"initial\":true}],\"edges\":[{\"source\":0,\"target\":1,\"text\":\"6\"},{\"source\":1,\"target\":0,\"text\":\"7\"},{\"source\":0,\"target\":0,\"text\":\"7\"},{\"source\":1,\"target\":1,\"text\":\"6\"}],\"usercode\":\"HISTOGRAM(h4,(`bins`,`binsize`))\\nCLOCK(c4,100,1)\\nstart:\\n    c4.start()\\nstop:\\n    c4.stop()\\n    h4.record_all(c4)\"}","vi_templatek0e44hsk":"{\"nodes\":[{\"x\":82,\"y\":88,\"fixed\":true,\"text\":\"a\",\"px\":82,\"py\":88,\"initial\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"1\"}],\"usercode\":\"a:\\n    emit(3,0)# here, ch0 is duplicated to ch2 with a delay of 0ps\"}","vi_templatek0e44v54":"{\"nodes\":[{\"x\":101,\"y\":101,\"fixed\":true,\"text\":\"a\",\"px\":101,\"py\":101,\"initial\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"2\"}],\"usercode\":\"a:\\n    emit(4,0)# here, ch1 is duplicated to ch3 with a delay of 0ps\"}","dpp_templatek0e4fe69":"#------IMPORTS-----\r\nfrom pathlib import Path\r\nimport numpy as np\r\n\r\nimport dash\r\nimport dash_core_components as dcc\r\nimport dash_html_components as html\r\nimport plotly.graph_objs as go\r\n#------ETA PROCESSING-----\r\n\r\ncut=eta.simple_cut(Path(file), 4)\r\nresult= eta.run(cut, group='HHT2')\r\nhist1=result[\"h3\"]\r\nhist2=result[\"h4\"]\r\n\r\nfullhist=np.concatenate((np.flip(hist2, 0), hist1), axis=0)\r\n#------PLOTTING-----\r\napp = dash.Dash()\r\napp.layout = html.Div(children=[\r\n    dcc.Graph(\r\n        id='example-ss',\r\n        figure={\r\n            'data': [\r\n                {\r\n                    'x': np.arange(-hist2.size,hist1.size)*int(float(binsize)), \r\n                    'y': fullhist,\r\n                    'type': 'bar',\r\n                    'name': 'bwd',\r\n                    'marker': {\r\n                        'color': '#0571b0'\r\n                    }\r\n                    \r\n                },\r\n            ],\r\n            'layout': {\r\n                'autosize':True,\r\n                'title': 'Start Stop Measurement',\r\n                'barmode': 'stack',\r\n                'xaxis' : {'title' : 'Time Delay (ps)'},\r\n                'yaxis' : {'title' : 'Coincidence Events'}\r\n            }\r\n        },\r\n        style={ \"height\" : \"100vh\"}\r\n    )\r\n], style={ \"height\" : \"100vh\"})\r\neta.display(app)","dpp_templatek0e4feyu":"#------IMPORTS-----\r\nfrom pathlib import Path\r\nimport numpy as np\r\n\r\nimport dash\r\nimport dash_core_components as dcc\r\nimport dash_html_components as html\r\nimport plotly.graph_objs as go\r\n#------ETA PROCESSING-----\r\n\r\ncut=eta.simple_cut(Path(file), 4)\r\nresult= eta.run(cut, group='quTAG')\r\nhist1=result[\"h3\"]\r\nhist2=result[\"h4\"]\r\n\r\nfullhist=np.concatenate((np.flip(hist2, 0), hist1), axis=0)\r\n#------PLOTTING-----\r\napp = dash.Dash()\r\napp.layout = html.Div(children=[\r\n    dcc.Graph(\r\n        id='example-ss',\r\n        figure={\r\n            'data': [\r\n                {\r\n                    'x': np.arange(-hist2.size,hist1.size)*int(float(binsize)), \r\n                    'y': fullhist,\r\n                    'type': 'bar',\r\n                    'name': 'bwd',\r\n                    'marker': {\r\n                        'color': '#0571b0'\r\n                    }\r\n                    \r\n                },\r\n            ],\r\n            'layout': {\r\n                'autosize':True,\r\n                'title': 'Start Stop Measurement',\r\n                'barmode': 'stack',\r\n                'xaxis' : {'title' : 'Time Delay (ps)'},\r\n                'yaxis' : {'title' : 'Coincidence Events'}\r\n            }\r\n        },\r\n        style={ \"height\" : \"100vh\"}\r\n    )\r\n], style={ \"height\" : \"100vh\"})\r\neta.display(app)","dpp_templatek0e4ffk5":"#------IMPORTS-----\r\nfrom pathlib import Path\r\nimport numpy as np\r\n\r\ndef get_files(extensions):\r\n    global path\r\n    all_files = []\r\n    for ext in extensions:\r\n        all_files.extend(path.glob(ext))\r\n    return all_files\r\n\r\n#------ETA PROCESSING-----\r\nbinsize=int(float(binsize))\r\npath = Path(file)\r\ndatafolder='analyzed data'\r\n\r\nselector = (f for f in get_files(('*.ptu','*.timeres'))) if path.is_dir() else [path]\r\n\r\nfor f in selector:\r\n        cutfile = eta.simple_cut(f,4)\r\n        result=eta.run(cutfile, group='HHT2')\r\n        t1=result[\"h3\"]\r\n        t2=result[\"h4\"] \r\n        fullhist=np.concatenate((np.flip(t2, 0), t1), axis=0)\r\n        f.parent.joinpath(datafolder).mkdir(parents=True, exist_ok=True)\r\n        np.savetxt(f.parent.joinpath(datafolder, f.stem + '_correlation' +  '.txt'), np.transpose([np.arange(-t2.size,t1.size)*binsize,fullhist]))\r\n        eta.send(str(f.name) + ' has been successfully processed')\r\neta.send('FINISHED')\r\n\r\n","dpp_templatek0e4ffxo":"#------IMPORTS-----\r\nfrom pathlib import Path\r\nimport numpy as np\r\n\r\ndef get_files(extensions):\r\n    global path\r\n    all_files = []\r\n    for ext in extensions:\r\n        all_files.extend(path.glob(ext))\r\n    return all_files\r\n\r\n#------ETA PROCESSING-----\r\nbinsize=int(float(binsize))\r\npath = Path(file)\r\ndatafolder='analyzed data'\r\n\r\nselector = (f for f in get_files(('*.ptu','*.timeres'))) if path.is_dir() else [path]\r\n\r\nfor f in selector:\r\n        cutfile = eta.simple_cut(f,4)\r\n        result=eta.run(cutfile, group='quTAG')\r\n        t1=result[\"h3\"]\r\n        t2=result[\"h4\"] \r\n        fullhist=np.concatenate((np.flip(t2, 0), t1), axis=0)\r\n        f.parent.joinpath(datafolder).mkdir(parents=True, exist_ok=True)\r\n        np.savetxt(f.parent.joinpath(datafolder, f.stem + '_correlation' +  '.txt'), np.transpose([np.arange(-t2.size,t1.size)*binsize,fullhist]))\r\n        eta.send(str(f.name) + ' has been successfully processed')\r\neta.send('FINISHED')\r\n\r\n"}