{"vi_templatejg7rpkiv":"{\"nodes\":[{\"x\":114,\"y\":140,\"fixed\":true,\"text\":\"a\",\"initial\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"0,1\"}],\"usercode\":\"HISTOGRAM(h1,(`bins`, `binsize`))\\nHISTOGRAM(h2,(`bins`, `binsize`))\\nCLOCK(c1)\\nCLOCK(c2)\\na--0-->a:\\n    c1.stop()\\n    h1.record(c1)\\na--1-->a:\\n    c2.stop()\\n    h2.record(c2)\"}","dpp_template_code":"#------IMPORTS-----\r\nimport numpy as np\r\nimport os\r\n\r\n    \r\n#------ETA PROCESSING-----\r\n\r\nresult = eta.run(file)\r\nt1=result[\"h1\"]\r\nt2=result[\"h2\"]\r\nbinsize=int(binsize)\r\nhist1=np.sum(t1.reshape(-1, int(rebinsize)), axis=1) # apply extra binning (2343)\r\nhist2=np.sum(t2.reshape(-1, int(rebinsize)), axis=1)\r\n#------PLOTTING/SAVING-----\r\nnp.savetxt(str(os.path.splitext(os.path.split(file)[-1])[0])+'.txt', np.transpose([np.arange(0,hist1.size*binsize,binsize),hist1,hist2]))","eta_index_table":"[{\"id\":\"var_templatejkimp1dz\",\"name\":\"file\",\"group\":\"main\",\"info\":\"\",\"config\":\"C:\\\\your_folder\\\\your_filename.ptu\"},{\"id\":\"var_templatejkimp6ts\",\"name\":\"binsize\",\"group\":\"main\",\"info\":\"\",\"config\":\"60000000000000\"},{\"id\":\"var_templatejkimp49t\",\"name\":\"bins\",\"group\":\"main\",\"info\":\"\",\"config\":\"3\"},{\"id\":\"var_templatejkimq3l9\",\"name\":\"rebinsize\",\"group\":\"main\",\"info\":\"\",\"config\":\"1\"},{\"id\":\"dpp_template_code\",\"name\":\"text_saver\",\"group\":\"main\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatejgmfaujq\",\"name\":\"plotly\",\"group\":\"main\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatejgmfdvub\",\"name\":\"bokeh\",\"group\":\"main\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatejgxmbufn\",\"name\":\"batch plot\",\"group\":\"main\",\"info\":\"\",\"config\":\"\"},{\"id\":\"ri_templatejkimu3sj\",\"name\":\"Time Tagger\",\"group\":\"main\",\"info\":\"ðŸ“¤ [0, 1]\",\"config\":\"[2,0]\"},{\"id\":\"vi_templatejg7rpkiv\",\"name\":\"NewInstrument\",\"group\":\"main\",\"info\":\"ðŸ“¥ [0, 1], ðŸ“¤ [], ðŸ“Š ??? \",\"config\":\"\"}]","dpp_templatejgmfaujq":"#------IMPORTS-----\r\nimport numpy as np\r\nimport dash\r\nimport dash_core_components as dcc\r\nimport dash_html_components as html\r\nimport plotly.graph_objs as go\r\n\r\n#------ETA PROCESSING-----\r\nresult = eta.run(file)\r\nbinsize=int(binsize)\r\nhist1=np.sum(result[\"h1\"].reshape(-1, int(rebinsize)), axis=1) # apply extra binning\r\nhist2=np.sum(result[\"h2\"].reshape(-1, int(rebinsize)), axis=1)\r\n\r\n#------PLOTTING-----\r\napp = dash.Dash()\r\napp.layout = html.Div(children=[\r\n    html.H1(children=file),\r\n    dcc.Graph(\r\n        id='countrate',\r\n        figure={\r\n            'data': [\r\n                {\r\n                    'x': np.arange(hist1.size)*binsize, \r\n                    'y': hist1,\r\n                    'type': 'bar',\r\n                    'name': 'bwd',\r\n                    'marker': {\r\n                        'color': '#0571b0'\r\n                    }\r\n                    \r\n                },\r\n                {\r\n                    'x': np.arange(hist2.size)*binsize, \r\n                    'y': hist2,\r\n                    'type': 'bar',\r\n                    'name': 'bwd',\r\n                    'marker': {\r\n                        'color': '#ca0020'\r\n                    }\r\n                    \r\n                },\r\n            ],\r\n            'layout': {\r\n                'title': file,\r\n                'barmode': 'stack',\r\n                'height': 300,\r\n                'xaxis' : {'title' : 'Time Delay (ps)'},\r\n                'yaxis' : {'title' : 'Coincidence Events'}\r\n            }\r\n        }\r\n    )\r\n])\r\neta.display(app)","dpp_templatejgmfdvub":"#------IMPORTS-----\r\nimport numpy as np\r\nresult = eta.run(file)\r\nt1= result[\"h1\"]\r\nt2=result[\"h2\"]\r\nbinsize=int(binsize) # accept bin size variable from left panel\r\nhist1=np.sum(t1.reshape(-1, int(rebinsize)), axis=1) # apply extra binning (2343)\r\nhist2=np.sum(t2.reshape(-1, int(rebinsize)), axis=1)\r\ndef modify_doc(doc):\r\n    global hist1, hist2\r\n    from bokeh.layouts import column\r\n    from bokeh.models import ColumnDataSource, Slider\r\n    from bokeh.plotting import figure\r\n    from bokeh.server.server import Server\r\n    from bokeh.themes import Theme\r\n    import numpy as np\r\n\r\n    p1 = figure(title=\"Powermeter mode\",\r\n            background_fill_color=\"white\")\r\n    p1.line(np.arange(hist1.size), hist1, line_color=\"black\", line_width=2, alpha=0.7, legend=\"CDF\")\r\n    \r\n    def callback(attr, old, new):\r\n        print(\"callback called\")\r\n\r\n    slider = Slider(start=0, end=30, value=0, step=1, title=\"Smoothing by N Days\")\r\n    slider.on_change('value', callback)\r\n\r\n    doc.add_root(column(slider, p1))\r\n\r\neta.display(modify_doc)\r\n","dpp_templatejgxmbufn":"#------IMPORTS-----\r\nimport numpy as np\r\nimport os\r\nimport matplotlib.pyplot as plt\r\nfrom os import path\r\n\r\nfolder = path.split(file)[0]\r\n#------ETA PROCESSING-----\r\nfor f in os.listdir(folder):\r\n    this_file=os.path.join(folder, f)\r\n    if not os.path.isdir(this_file) and this_file.endswith(\".ptu\"):\r\n        #eta.show('Started processing of file '+f)\r\n        result = eta.run(this_file)\r\n        t1 = result[\"h1\"]\r\n        t2 = result[\"h2\"]\r\n        binsize = int(binsize) # accept bin size variable from left panel\r\n        \r\n        hist1 = np.sum(t1.reshape(-1, binsize), axis=1) # apply extra binning (2343)\r\n        hist2 = np.sum(t2.reshape(-1, binsize), axis=1)\r\n        \r\n        x = np.arange(hist1.size)*binsize/3600\r\n        \r\n        p1 = plt.bar(x,hist1, width=binsize/3600, color='crimson')\r\n        p2 = plt.bar(x,hist2, width=binsize/3600, bottom= hist1, color='navy')\r\n        \r\n        plt.ylabel('photon events')\r\n        plt.xlabel('time (h)')\r\n        \r\n        \r\n        list_of_title=f.split('_')\r\n        title='Slit: {}   Transition: {}   Excitation: {}'.format(list_of_title[2][4:],list_of_title[1],(list_of_title[3][:1]+' Pi'))\r\n        plt.title(title)\r\n        \r\n        plt.savefig(folder+'\\\\graphs\\\\'+f.replace('.ptu','_countrate.eps'), format='eps', dpi=1200)\r\n        plt.savefig(folder+'\\\\graphs\\\\'+f.replace('.ptu','_countrate.png'), format='png', dpi=1200)\r\n        \r\n        plt.clf()","var_templatejkimp1dz":null,"var_templatejkimp49t":null,"var_templatejkimp6ts":null,"var_templatejkimq3l9":null,"ri_templatejkimu3sj":null}
