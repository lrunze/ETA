{"vi_templatejevjreof":"{\"nodes\":[{\"x\":224,\"y\":115,\"fixed\":true,\"initial\":true,\"text\":\"state\",\"marked\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"2\"}],\"usercode\":\"CLOCK(c1)\\nHISTOGRAM(t1,(`bins`,`binsize`))\\n\\nstate--2-->state:\\n    c1.stop()\\n    c1.start(LAST_SYNC)\\n    t1.record(c1)\\n\"}","dpp_template_code":"#------IMPORTS-----\r\nimport numpy as np\r\nimport dash\r\nimport dash_core_components as dcc\r\nimport dash_html_components as html\r\nimport plotly.graph_objs as go\r\n\r\n#------ETA PROCESSING-----\r\ncutfile = eta.simple_cut(filename,4)\r\nresult = eta.run(cutfile, group='compile')\r\nh1=result[\"t1\"]\r\n#h1=np.loadtxt(\"h1.tensor\") #use this line instead of the previous 3 lines (ETA PROCESSING) if you want to load a reviously saved file for plotting\r\n#np.savetxt(\"h1.tensor\",h1) #use this line instead of plotting if you want to save the analysis result to a file\r\n\r\n\r\n#------PLOTTING-----\r\napp = dash.Dash()\r\napp.layout = html.Div(children=[\r\n    html.H1(children=expname),\r\n    dcc.Graph(\r\n        id='example-ss',\r\n        figure={\r\n            'data': [\r\n                {\r\n                    'x': np.arange(h1.size)*int(binsize), \r\n                    'y': h1,\r\n                    'type': 'bar',\r\n                    'name': 'bwd',\r\n                    'marker': {\r\n                        'color': '#0571b0'\r\n                    }\r\n                    \r\n                },\r\n            ],\r\n            'layout': {\r\n                'title': 'Start Stop Measurement',\r\n                'barmode': 'stack',\r\n                'height': 300,\r\n                'xaxis' : {'title' : 'Time Delay (ps)'},\r\n                'yaxis' : {'title' : 'Coincidence Events'}\r\n            }\r\n        }\r\n    )\r\n])\r\neta.display(app)","eta_index_table":"[{\"id\":\"var_templatejkim3bkj\",\"name\":\"filename\",\"group\":\"compile\",\"info\":\"\",\"config\":\"C:/YourFolder/YourFile.ptu\"},{\"id\":\"var_templatejkim48wp\",\"name\":\"binsize\",\"group\":\"compile\",\"info\":\"\",\"config\":\"16\"},{\"id\":\"var_templatejkim2z6x\",\"name\":\"bins\",\"group\":\"compile\",\"info\":\"\",\"config\":\"780\"},{\"id\":\"var_templatejkim6uch\",\"name\":\"expname\",\"group\":\"compile\",\"info\":\"\",\"config\":\"simple lifetime\"},{\"id\":\"var_templatejks89alb\",\"name\":\"ch_sel\",\"group\":\"compile\",\"info\":\"\",\"config\":\"t2\"},{\"id\":\"dpp_template_code\",\"name\":\"plotly\",\"group\":\"compile\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatejhj7imob\",\"name\":\"txt+graph\",\"group\":\"compile\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatejlxgwwaf\",\"name\":\"pyplot\",\"group\":\"compile\",\"info\":\"\",\"config\":\"\"},{\"id\":\"ri_templatejkim223k\",\"name\":\"Time Tagger\",\"group\":\"compile\",\"info\":\"ðŸ“¤ [0, 1]\",\"config\":\"[2,0]\"},{\"id\":\"vi_templatejks7yt8a\",\"name\":\"delay0-2\",\"group\":\"compile\",\"info\":\"ðŸ“¥ [0], ðŸ“¤ [2], ðŸ“Š ??? \",\"config\":\"\"},{\"id\":\"vi_templatejhrlupxy\",\"name\":\"delay1-3\",\"group\":\"compile\",\"info\":\"ðŸ“¥ [1], ðŸ“¤ [3], ðŸ“Š ??? \",\"config\":\"\"},{\"id\":\"vi_templatejevjreof\",\"name\":\"lifetime (start=SYNC, stop=ch2)\",\"group\":\"compile\",\"info\":\"ðŸ“¥ [2], ðŸ“¤ [], ðŸ“Š ??? \",\"config\":\"\"},{\"id\":\"vi_templatejks7tmye\",\"name\":\"lifetime (start=SYNC, stop=ch3)\",\"group\":\"compile\",\"info\":\"ðŸ“¥ [3], ðŸ“¤ [], ðŸ“Š ??? \",\"config\":\"\"},{\"id\":\"vi_templatejhrlp8yt\",\"name\":\"lifetime (start=ch2, stop=ch3)\",\"group\":\"compile\",\"info\":\"ðŸ“¥ [2, 3], ðŸ“¤ [], ðŸ“Š ??? \",\"config\":\"\"}]","dpp_templatejhj7imob":"#------IMPORTS-----\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom pylab import figure, cm\r\nfrom matplotlib.colors import LogNorm\r\nfrom os import path\r\n\r\nbinsize = int(binsize)\r\nbins = int(bins)\r\n#------ETA PROCESSING-----\r\ncutfile = eta.simple_cut(filename,4)\r\nresult = eta.run(cutfile, group='compile')\r\nh1=result[ch_sel]\r\n\r\n\r\nroot, file = path.split(filename)\r\n\r\n#------PLOTTING-----\r\n\r\nxvalues = np.arange(0,bins*binsize,binsize)\r\nyvalues = h1\r\n\r\nnp.savetxt(root+'\\\\'+ path.splitext(file)[0]+'_lifetime'+'.txt', np.transpose([xvalues,yvalues]))\r\n\r\np1 = plt.bar(xvalues, yvalues, width=binsize, color='#0088ff')\r\n\r\nplt.ylabel('events')\r\nplt.xlabel('time (ps)')\r\n#plt.show()\r\nplt.savefig(root+'\\\\'+ path.splitext(file)[0]+'_lifetime'+'.png', format = 'png')\r\nplt.savefig(root+'\\\\'+ path.splitext(file)[0]+'_lifetime'+'.eps', format = 'eps')\r\nplt.clf()","vi_templatejhrlp8yt":"{\"nodes\":[{\"x\":145,\"y\":157,\"fixed\":true,\"initial\":true,\"text\":\"stopped\",\"marked\":true},{\"x\":366,\"y\":174,\"fixed\":true,\"text\":\"started\",\"marked\":true}],\"edges\":[{\"source\":0,\"target\":1,\"text\":\"2\"},{\"source\":1,\"target\":0,\"text\":\"3\"},{\"source\":1,\"target\":1,\"text\":\"2\"}],\"usercode\":\"CLOCK(c3)\\nHISTOGRAM(t3,(`bins`,`binsize`))\\n\\nstarted:\\n    c3.start()\\nstopped:\\n    c3.stop()\\n    t3.record(c3)\"}","vi_templatejhrlupxy":"{\"nodes\":[{\"x\":141,\"y\":129,\"fixed\":true,\"initial\":true,\"text\":\"a\"}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"1\"}],\"usercode\":\"a:\\n    emit(3,0)\"}","ri_templatejkim223k":null,"var_templatejkim2z6x":null,"var_templatejkim3bkj":null,"var_templatejkim48wp":null,"var_templatejkim6uch":null,"vi_templatejks7tmye":"{\"nodes\":[{\"x\":224,\"y\":115,\"fixed\":true,\"initial\":true,\"text\":\"state\",\"marked\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"3\"}],\"usercode\":\"CLOCK(c2)\\nHISTOGRAM(t2,(`bins`,`binsize`))\\n\\nstate--3-->state:\\n    c2.stop()\\n    c2.start(LAST_SYNC)\\n    t2.record(c2)\\n\"}","vi_templatejks7yt8a":"{\"nodes\":[{\"x\":141,\"y\":129,\"fixed\":true,\"initial\":true,\"text\":\"a\"}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"0\"}],\"usercode\":\"a:\\n    emit(2,1000)\"}","var_templatejks89alb":null,"dpp_templatejlxgwwaf":"#------IMPORTS-----\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.widgets import Button\r\n\r\n#------ETA PROCESSING-----\r\ncutfile = eta.simple_cut(filename,4)\r\nresult = eta.run(cutfile, group='compile')\r\nh1=result[ch_sel]\r\n#h1=np.loadtxt(\"C:\\PathToFile\\result.txt\") #use this line instead of the previous 3 lines (ETA PROCESSING) if you want to load a reviously saved file for plotting\r\n#np.savetxt(\"C:\\PathToFile\\result.txt\",h1) #use this line instead of plotting if you want to save the analysis result to a file\r\n\r\n#------PLOTTING-----\r\nbinsize=int(binsize)\r\n\r\n\r\n\r\nfig, ax = plt.subplots()\r\nplt.subplots_adjust(bottom=0.2)\r\nax.set_xlabel('Time delay (ps)')\r\nax.set_ylabel('Histogram events')\r\nax.set_title(expname)\r\n\r\nl = ax.bar(np.arange(len(h1))*binsize, h1, binsize, yerr=np.sqrt(h1))\r\nlog=False\r\n\r\nclass Index(object):\r\n    def linlog(self, event):\r\n        global ax, plt, log\r\n        if log==True:\r\n            ax.set_yscale(\"linear\")\r\n            log=False\r\n        else:\r\n            ax.set_yscale(\"log\", nonposy='clip')\r\n            log=True\r\n        plt.draw()\r\n\r\ncallback = Index()\r\naxlinlog = plt.axes([0.81, 0.05, 0.1, 0.075])\r\nblinlog = Button(axlinlog, 'Lin/Log')\r\nblinlog.on_clicked(callback.linlog)\r\n\r\nplt.show()"}
