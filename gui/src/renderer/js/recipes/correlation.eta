{"ri_templatejezi0bbr":null,"vi_templatejg59migx":"{\"nodes\":[{\"x\":58,\"y\":63,\"fixed\":true,\"text\":\"a\",\"px\":58,\"py\":63,\"initial\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"1\"}],\"usercode\":\"a:\\n    emit(3,60240)#90000000\"}","vi_templatejfc9koma":"{\"nodes\":[{\"x\":58,\"y\":63,\"fixed\":true,\"text\":\"a\",\"px\":58,\"py\":63,\"initial\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"0\"}],\"usercode\":\"a:\\n    emit(2,0)#90000000\"}","vi_templatejg52ksbp":"{\"nodes\":[{\"x\":346,\"y\":111,\"fixed\":true,\"text\":\"start\",\"px\":346,\"py\":111},{\"x\":75,\"y\":66,\"fixed\":true,\"text\":\"stop\",\"px\":75,\"py\":66,\"initial\":true}],\"edges\":[{\"source\":0,\"target\":1,\"text\":\"3\"},{\"source\":1,\"target\":0,\"text\":\"2\"},{\"source\":0,\"target\":0,\"text\":\"2\"},{\"source\":1,\"target\":1,\"text\":\"3\"}],\"usercode\":\"HISTOGRAM(h3,(`bins`,`binsize`))#18744000\\nCLOCK(c3,100,1)\\nstart:\\n    c3.start()\\nstop:\\n    c3.stop()\\n    h3.record_all(c3)\"}","vi_templatejfb2qshf":"{\"nodes\":[{\"x\":346,\"y\":111,\"fixed\":true,\"text\":\"start\",\"px\":346,\"py\":111},{\"x\":75,\"y\":66,\"fixed\":true,\"text\":\"stop\",\"px\":75,\"py\":66,\"initial\":true}],\"edges\":[{\"source\":0,\"target\":1,\"text\":\"2\"},{\"source\":1,\"target\":0,\"text\":\"3\"},{\"source\":0,\"target\":0,\"text\":\"3\"},{\"source\":1,\"target\":1,\"text\":\"2\"}],\"usercode\":\"HISTOGRAM(h4,(`bins`,`binsize`))#18744000\\nCLOCK(c4,100,1)\\nstart:\\n    c4.start()\\nstop:\\n    c4.stop()\\n    h4.record_all(c4)\"}","dpp_template_code":"#------IMPORTS-----\r\nimport numpy as np\r\nimport dash\r\nimport dash_core_components as dcc\r\nimport dash_html_components as html\r\nimport plotly.graph_objs as go\r\nfrom os import path\r\n#------ETA PROCESSING-----\r\n\r\ncut=eta.simple_cut(file,4)\r\nresult= eta.run(cut, group='main')\r\nhist1=result[\"h3\"]\r\nhist2=result[\"h4\"]\r\n\r\nfullhist_ss=np.concatenate((np.flip(hist2, 0), hist1), axis=0)\r\n#------PLOTTING-----\r\napp = dash.Dash()\r\napp.layout = html.Div(children=[\r\n    html.H1(children=expname),\r\n    dcc.Graph(\r\n        id='example-ss',\r\n        figure={\r\n            'data': [\r\n                {\r\n                    'x': np.arange(-hist2.size,hist1.size)*int(binsize), \r\n                    'y': fullhist_ss,\r\n                    'type': 'bar',\r\n                    'name': 'bwd',\r\n                    'marker': {\r\n                        'color': '#0571b0'\r\n                    }\r\n                    \r\n                },\r\n            ],\r\n            'layout': {\r\n                'title': 'Start Stop Measurement',\r\n                'barmode': 'stack',\r\n                'height': 300,\r\n                'xaxis' : {'title' : 'Time Delay (ps)'},\r\n                'yaxis' : {'title' : 'Coincidence Events'}\r\n            }\r\n        }\r\n    )\r\n])\r\neta.display(app)","eta_index_table":"[{\"id\":\"var_templatejgmgopco\",\"name\":\"file\",\"group\":\"main\",\"info\":\"\",\"config\":\"C:/Users/zuzeng/source/repos/ETA/180621_marker_001.ptu\"},{\"id\":\"var_templatejgmgor6i\",\"name\":\"binsize\",\"group\":\"main\",\"info\":\"16\",\"config\":\"16\"},{\"id\":\"var_templatejgoxm1kc\",\"name\":\"expname\",\"group\":\"main\",\"info\":\"correlation\",\"config\":\"correlation\"},{\"id\":\"var_templatejh7ylntd\",\"name\":\"bins\",\"group\":\"main\",\"info\":\"10000\",\"config\":\"10000\"},{\"id\":\"var_templatejhhdoy3o\",\"name\":\"plotsize_x\",\"group\":\"main\",\"info\":\"3200\",\"config\":\"3200\"},{\"id\":\"dpp_template_code\",\"name\":\"plotly\",\"group\":\"main\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatejgoxpkeh\",\"name\":\"plotly+fitting\",\"group\":\"main\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatejgs3h609\",\"name\":\"batch graph (zoom-in)\",\"group\":\"main\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatejgqnmykj\",\"name\":\"batch txt\",\"group\":\"main\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatejgs1c21d\",\"name\":\"batch g2 analysis and graph\",\"group\":\"main\",\"info\":\"\",\"config\":\"\"},{\"id\":\"ri_templatejezi0bbr\",\"name\":\"TimeTagger\",\"group\":\"main\",\"info\":\"游닋 [0, 1]\",\"config\":\"[2,0]\"},{\"id\":\"vi_templatejg59migx\",\"name\":\"DL1-3\",\"group\":\"main\",\"info\":\"游닌 [1], 游닋 [3], 游늵 ??? \",\"config\":\"\"},{\"id\":\"vi_templatejfc9koma\",\"name\":\"DL0-2\",\"group\":\"main\",\"info\":\"游닌 [0], 游닋 [2], 游늵 ??? \",\"config\":\"\"},{\"id\":\"vi_templatejg52ksbp\",\"name\":\"Correlationbwd\",\"group\":\"main\",\"info\":\"游닌 [3, 2], 游닋 [], 游늵 ??? \",\"config\":\"\"},{\"id\":\"vi_templatejfb2qshf\",\"name\":\"Correlationfwd\",\"group\":\"main\",\"info\":\"游닌 [2, 3], 游닋 [], 游늵 ??? \",\"config\":\"\"}]","var_templatejgmgopco":null,"var_templatejgmgor6i":null,"var_templatejgoxm1kc":null,"dpp_templatejgoxpkeh":"#------IMPORTS-----\r\nimport numpy as np\r\nfrom lmfit import Model\r\nimport plotly.graph_objs as go\r\nimport dash_core_components as dcc\r\nimport dash_html_components as html\r\nimport dash\r\n\r\n#------ETA Processing & FITTING & PLOTTING-----\r\n\r\nresult=eta.run(file, group='main')\r\nt1=result[\"h3\"]\r\nt2=result[\"h4\"] \r\nh_y=np.concatenate((np.flip(t2, 0), t1), axis=0)\r\n\r\nh_x = np.arange(-h_y.size/2,h_y.size/2)*16\r\n\r\nfit_text=\"no fit\"\r\n# Create traces\r\noriginal_data=go.Scatter(\r\n                    x = h_x,\r\n                    y = h_y,\r\n                    mode = 'markers',\r\n                    name = 'original g(2)'\r\n                )\r\nfit_layout={\r\n    'title':expname,\r\n    'height': 600,\r\n    'xaxis' : {'title' : 'Time Delay (ps)'},\r\n    'yaxis' : {'title' : 'Coincidence Events'}\r\n    \r\n}\r\napp = dash.Dash()\r\napp.layout = html.Div([\r\n    html.H1(expname),\r\n    html.Div([\r\n            '# of peaks',dcc.Input(id='num_spks', type='number',value=0),\r\n            ' offset',dcc.Input(id='offsetx', type='number',value=0),\r\n            ' A0',dcc.Input(id='A0', type='number',value=-0.6),html.Br(),\r\n            'A1',dcc.Input(id='A1', type='number',value=60),\r\n            ' life time',dcc.Input(id='tr', type='number',value=218),\r\n            ' repetition rate',dcc.Input(id='rep', type='number',value=12500),\r\n            \r\n\t\t\thtml.Button('Fit', id='button'),\r\n    ]),\r\n    dcc.Graph(id='mygraph1',figure={'data':[original_data],  \"layout\":fit_layout}),\r\n    html.Pre( children=fit_text,id='report')\r\n])\r\n   \r\n@app.callback(\r\n        dash.dependencies.Output('report', component_property='children'),\r\n        [dash.dependencies.Input('mygraph1', 'figure')]\r\n        )\r\ndef update_text(useless):\r\n    global fit_text\r\n    return fit_text\r\n\r\n@app.callback(\r\n    dash.dependencies.Output('mygraph1', 'figure'),\r\n    [dash.dependencies.Input('button', 'n_clicks')],\r\n    [dash.dependencies.State('num_spks', 'value'),\r\n    dash.dependencies.State('offsetx', 'value'),\r\n    dash.dependencies.State('A0', 'value'),\r\n    dash.dependencies.State('A1', 'value'),\r\n    dash.dependencies.State('tr', 'value'),\r\n    dash.dependencies.State('rep', 'value')\r\n    ])\r\ndef update_output(n_clicks, num_spks,offsetx, A0, A1, tr, rep):\r\n    global fit_text,original_data,h_x,h_y,go,dcc,np,Model,fit_layout\r\n    #target function\r\n    def pulsed_g2(x, B, A0, A1, tr, rep,offsetx,num_spks):\r\n        global np\r\n        x=x+offsetx\r\n        sidepeaks=0.0\r\n        for i in range(1,int(num_spks)):\r\n            sidepeaks+=A1*np.exp(-abs(x-i*rep)/tr)+A1*np.exp(-abs(x+i*rep)/tr)    \r\n        add1= A0*np.exp(-abs(x)/tr)\r\n        add2=(sidepeaks)*(1-np.exp(-abs(x)/(tr)))\r\n        ret=(B+add1+add2)\r\n        return ret\r\n    #fitting\r\n    data=[original_data]\r\n    try:\r\n        mod = Model(pulsed_g2)\r\n        pars = mod.make_params()\r\n        pars[\"num_spks\"].vary = False\r\n        result = mod.fit(h_y, x=h_x, num_spks=num_spks, B=-8, A0=A0, A1=A1, tr=tr, rep=rep,offsetx=offsetx)\r\n\r\n        data.append( go.Scatter(\r\n                    x = h_x,\r\n                    y = result.best_fit ,\r\n                    mode = 'line',\r\n                    name = 'fitted g(2)',\r\n                ))\r\n        fit_text= result.fit_report()\r\n    except Exception as ee:\r\n        fit_text=str(ee)\r\n \r\n    return {'data':data,  \"layout\":fit_layout}\r\n\r\neta.display(app)","dpp_templatejgqnmykj":"#------IMPORTS-----\r\nimport numpy as np\r\nimport os\r\n#------ETA PROCESSING-----\r\nbinsize=int(binsize)\r\nfolder = os.path.split(file)[0]\r\n\r\nfor f in os.listdir(folder):\r\n    this_file=os.path.join(folder, f)\r\n    if not os.path.isdir(this_file) and this_file.endswith('.ptu'):\r\n        result=eta.run(this_file, group='main')\r\n        t1=result[\"h3\"]\r\n        t2=result[\"h4\"] \r\n        fullhist=np.concatenate((np.flip(t2, 0), t1), axis=0)\r\n        np.savetxt(os.path.join(folder,str(os.path.splitext(os.path.split(this_file)[-1])[0])+'.txt'), np.transpose([np.arange(-t2.size,t1.size)*binsize,fullhist]))\r\n        eta.send(str(this_file) + ' has been successfully processed')\r\neta.send('FINISHED')\r\n\r\n","dpp_templatejgs1c21d":"#------IMPORTS-----\r\nimport numpy as np\r\nimport pandas as pd\r\nimport os\r\nimport matplotlib.pyplot as plt\r\n#------ETA PROCESSING-----\r\nfolder = os.path.split(file)[0]\r\n\r\nfor f in os.listdir(folder):\r\n    this_file=os.path.join(folder, f)\r\n    if not os.path.isdir(this_file) and this_file.endswith(\".txt\"):\r\n        print(f)\r\n        list_of_title=f.split('_')\r\n\r\n        data=pd.read_table(this_file, header=None, names=['ps', 'cnts'], sep=' ')\r\n        data.set_index('ps', inplace=True)\r\n        data = data['cnts']\r\n        \r\n        numberofsidepeaks = 8 # must be even\r\n        bin=16\r\n        shift = 0\r\n        widthofdata = 120000\r\n        leftend = int(-widthofdata/2+shift)\r\n        rightend = int(widthofdata/2+shift)\r\n        lessthanrep = 12300\r\n        \r\n        reprate = int(((data.loc[rightend-lessthanrep:rightend].idxmax()-data.loc[leftend:leftend+lessthanrep].idxmax())/int(numberofsidepeaks)))\r\n        \r\n        g2vsdT = pd.DataFrame()\r\n        for window in range(bin, lessthanrep, bin):\r\n            peaks = np.array([])\r\n            \r\n            for x in range(int(data.loc[leftend:leftend+reprate].idxmax()), rightend, reprate):\r\n                temp0=data.loc[x-window/2:x+window/2].sum()\r\n                peaks=np.append([peaks], [temp0])\r\n        \r\n            center = peaks[int(numberofsidepeaks/2)]\r\n            average = np.mean([peaks[:int(numberofsidepeaks/2)], peaks[1+int(numberofsidepeaks/2):]])\r\n            average_err = (np.sqrt(np.sum([peaks[:int(numberofsidepeaks/2)], peaks[1+int(numberofsidepeaks/2):]]))/int(numberofsidepeaks))\r\n            g2 = center/average\r\n            g2_err = np.sqrt(center/(average**2)+(average_err**2)*(peaks[int(numberofsidepeaks/2)]**2)/average**4)\r\n            \r\n            if window == 5008:\r\n                print('Time window: '+str(window)+' ps'+'\\n'+'average counts per peak: '+str(average) + ' pm ' + str(average_err) + '\\n' + 'g2: '+ str(g2)+ ' pm ' + str(g2_err)+'\\n'+'center peak delay: ' + str(reprate*(numberofsidepeaks/2)+data.loc[leftend:leftend+lessthanrep].idxmax())+' ps' +'\\n'+'pulse delay: '+str(reprate)+' ps')\r\n                center_peak_delay = reprate*(numberofsidepeaks/2)+data.loc[leftend:leftend+lessthanrep].idxmax()\r\n                good_average = average\r\n                good_average_err = average_err\r\n                good_g2 = g2\r\n                good_g2_err = g2_err\r\n            temp1 = pd.DataFrame([[window, g2, g2_err]], columns=['Time Window', 'g(2)', 'delta g(2)'])\r\n            g2vsdT = pd.concat([g2vsdT, temp1], ignore_index=True)\r\n        \r\n        \r\n        g2vsdT.set_index('Time Window', inplace=True)\r\n        g2vsdT = pd.concat([g2vsdT, g2vsdT['g(2)']+g2vsdT['delta g(2)'], g2vsdT['g(2)']-g2vsdT['delta g(2)']], axis=1)\r\n        g2vsdT.rename(columns={0:'err+', 1:'err-'}, inplace=True)\r\n        \r\n        title='Slit: {}   Transition: {}   Excitation: {}'.format(list_of_title[2][4:],list_of_title[1],(list_of_title[3][:1]+' Pi') + '\\n'+'average counts per peak: '+str(int(good_average)) + r' $\\pm$ ' + str(int(good_average_err)) + '\\n' + 'g2: '+  \"{0:.6f}\".format(good_g2) + r' $\\pm$ ' + \"{0:.6f}\".format(good_g2_err))\r\n        data = data.loc[leftend:rightend]\r\n        p1 = plt.bar(data.index,data, width=bin, color='salmon', log=True)\r\n\r\n        plt.ylabel('correlation events')\r\n        plt.xlabel('time (ps)')\r\n        plt.title(title)\r\n        plt.savefig(folder+'\\\\graphs\\\\'+f.replace('.txt','.eps'), format='eps', dpi=1200)\r\n        plt.savefig(folder+'\\\\graphs\\\\'+f.replace('.txt','.png'), format='png', dpi=1200)\r\n        plt.clf()","dpp_templatejgs3h609":"#------IMPORTS-----\r\nimport numpy as np\r\nimport os\r\nimport matplotlib.pyplot as plt\r\n#------ETA PROCESSING-----\r\n\r\nfolder = os.path.split(file)[0]\r\nplotsize_x=int(plotsize_x)\r\nbinsize=int(binsize)\r\n\r\nfor f in os.listdir(folder):\r\n    this_file=os.path.join(folder, f)\r\n    if not os.path.isdir(this_file) and this_file.endswith(\".txt\"):\r\n        print(f)\r\n        \r\n        list_of_title=f.split('_')\r\n        title='Slit: {}   Transition: {}   Excitation: {}'.format(list_of_title[2][4:],list_of_title[1],(list_of_title[3][:1]+' Pi'))\r\n        #title=expname\r\n        data=np.loadtxt(this_file)\r\n        read_bins=len(np.transpose(data)[0])\r\n        #zero=int(len(data[:,0])/2)\r\n        p1 = plt.bar(data[int((read_bins-plotsize_x/binsize)/2):int((read_bins+plotsize_x/binsize)/2),0], data[int((read_bins-plotsize_x/binsize)/2):int((read_bins+plotsize_x/binsize)/2),1],width=binsize, color='#0088ff')\r\n        #p2 = plt.bar(data[t2.size:,0]/1000000, data[t2.size:,1],width=binsize/1000000, color='#ca2027')\r\n        #zero-int(bins):zero+int(bins)\r\n        plt.ylabel('events')\r\n        plt.xlabel('time (ps)')\r\n        #plt.xlim(-t2.size*binsize/1000000,t1.size*binsize/1000000)\r\n        plt.title(title)\r\n        filename,ext=os.path.splitext(f)\r\n        plt.savefig(folder+'\\\\graphs\\\\'+filename+'_inset'+'.eps', format='eps', dpi=1200)\r\n        plt.savefig(folder+'\\\\graphs\\\\'+filename+'_inset'+'.png', format='png', dpi=1200)\r\n        plt.clf()\r\n        eta.send(f + ' has been successfully plotted')","var_templatejh7ylntd":null,"var_templatejhhdoy3o":null}