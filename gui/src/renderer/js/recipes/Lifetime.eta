{"vi_templatejevjreof":"{\"nodes\":[{\"x\":232,\"y\":105,\"fixed\":true,\"initial\":true,\"text\":\"state\",\"marked\":true,\"px\":232,\"py\":105}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"2\"}],\"usercode\":\"CLOCK(c1)\\nHISTOGRAM(t1,(`bins`,`binsize`))\\n\\nstate--2-->state:\\n    c1.stop()\\n    c1.start(LAST_SYNC)\\n    t1.record(c1)\\n\"}","dpp_template_code":"#------IMPORTS-----\r\nimport numpy as np\r\nimport dash\r\nimport dash_core_components as dcc\r\nimport dash_html_components as html\r\nimport plotly.graph_objs as go\r\n\r\n#------ETA PROCESSING-----\r\ncutfile = eta.simple_cut(file,4)\r\nresult = eta.run(cutfile, group='compile')\r\nh1=result[\"t1\"]\r\n#h1=np.loadtxt(\"h1.tensor\") #use this line instead of the previous 3 lines (ETA PROCESSING) if you want to load a reviously saved file for plotting\r\n#np.savetxt(\"h1.tensor\",h1) #use this line instead of plotting if you want to save the analysis result to a file\r\n\r\n\r\n#------PLOTTING-----\r\napp = dash.Dash()\r\napp.layout = html.Div(children=[\r\n    html.H1(children=expname),\r\n    dcc.Graph(\r\n        id='example-ss',\r\n        figure={\r\n            'data': [\r\n                {\r\n                    'x': np.arange(h1.size)*int(float(binsize)), \r\n                    'y': h1,\r\n                    'type': 'bar',\r\n                    'name': 'bwd',\r\n                    'marker': {\r\n                        'color': '#0571b0'\r\n                    }\r\n                    \r\n                },\r\n            ],\r\n            'layout': {\r\n                'autosize':True,\r\n                'title': 'Start Stop Measurement',\r\n                'barmode': 'stack',\r\n                'xaxis' : {'title' : 'Time Delay (ps)'},\r\n                'yaxis' : {'title' : 'Coincidence Events'}\r\n            }\r\n        },\r\n        style={ \"height\" : \"100vh\"}\r\n    )\r\n], style={ \"height\" : \"100vh\"})\r\neta.display(app)","eta_index_table":"[{\"id\":\"var_templatejkim3bkj\",\"name\":\"file\",\"group\":\"compile\",\"info\":\"\",\"config\":\"K:/Shared/Joint Projects/1st Lukas visit/data/QD1 Goldjunge/g2/181112_QD1_g2_T3_X_RF_1pi_withWL_slit38_TS_003.timeres\"},{\"id\":\"var_templatejkim48wp\",\"name\":\"binsize\",\"group\":\"compile\",\"info\":\"\",\"config\":\"16\"},{\"id\":\"var_templatejkim2z6x\",\"name\":\"bins\",\"group\":\"compile\",\"info\":\"\",\"config\":\"780\"},{\"id\":\"var_templatejkim6uch\",\"name\":\"expname\",\"group\":\"compile\",\"info\":\"\",\"config\":\"simple lifetime\"},{\"id\":\"var_templatejks89alb\",\"name\":\"ch_sel\",\"group\":\"compile\",\"info\":\"\",\"config\":\"t1\"},{\"id\":\"var_templatek1wj6afv\",\"name\":\"records_per_cut\",\"group\":\"compile\",\"info\":\"\",\"config\":\"2e5\"},{\"id\":\"dpp_template_code\",\"name\":\"plotly\",\"group\":\"compile\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatejlxgwwaf\",\"name\":\"pyplot\",\"group\":\"compile\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatejhj7imob\",\"name\":\"txt+graph\",\"group\":\"compile\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatek1wj2rzj\",\"name\":\"realtime\",\"group\":\"compile\",\"info\":\"\",\"config\":\"\"},{\"id\":\"ri_templatejkim223k\",\"name\":\"Time Tagger\",\"group\":\"compile\",\"info\":\"游닋 [0, 1]\",\"config\":\"[2,0]\"},{\"id\":\"vi_templatejks7yt8a\",\"name\":\"delay0-2\",\"group\":\"compile\",\"info\":\"游닌 [0], 游닋 [2] \",\"config\":\"\"},{\"id\":\"vi_templatejhrlupxy\",\"name\":\"delay1-3\",\"group\":\"compile\",\"info\":\"游닌 [1], 游닋 [3] \",\"config\":\"\"},{\"id\":\"vi_templatejevjreof\",\"name\":\"lifetime (start=SYNC, stop=ch2)[t1]\",\"group\":\"compile\",\"info\":\"游닌 [2], 游닋 [] \",\"config\":\"\"},{\"id\":\"vi_templatejks7tmye\",\"name\":\"lifetime (start=SYNC, stop=ch3)[t2]\",\"group\":\"compile\",\"info\":\"游닌 [3], 游닋 [] \",\"config\":\"\"},{\"id\":\"vi_templatejhrlp8yt\",\"name\":\"lifetime (start=ch2, stop=ch3)[t3]\",\"group\":\"compile\",\"info\":\"游닌 [2, 3], 游닋 [] \",\"config\":\"\"}]","dpp_templatejhj7imob":"#------IMPORTS-----\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom pylab import figure, cm\r\nfrom matplotlib.colors import LogNorm\r\nfrom pathlib import Path\r\n\r\ndef get_files(extensions):\r\n    global path\r\n    all_files = []\r\n    for ext in extensions:\r\n        all_files.extend(path.glob(ext))\r\n    return all_files\r\n    \r\nbinsize = int(float(binsize))\r\nbins = int(float(bins))\r\n\r\n#------ETA PROCESSING-----\r\n\r\ndatafolder='analyzed data'\r\ngraphsfolder='graphs'\r\npath = Path(file)\r\n\r\nselector = (f for f in get_files(('*.ptu','*.timeres'))) if path.is_dir() else [path.resolve()]\r\n\r\nfor f in selector:\r\n    eta.send('Working on ' + str(f.name))\r\n    cutfile = eta.simple_cut(f,4)\r\n    result = eta.run(cutfile, group='compile')\r\n    h1=result[ch_sel]\r\n    \r\n    #------PLOTTING-----\r\n    \r\n    xvalues = np.arange(0,bins*binsize,binsize)\r\n    yvalues = h1\r\n    \r\n    f.parent.joinpath(datafolder).mkdir(parents=True, exist_ok=True)\r\n    np.savetxt(f.parent.joinpath(datafolder, f.stem + '_lifetime' + '.txt'), np.transpose([xvalues,yvalues]))\r\n    \r\n    p1 = plt.bar(xvalues, yvalues, width=binsize, color='#0088ff')\r\n    \r\n    plt.ylabel('events')\r\n    plt.xlabel('time (ps)')\r\n    #plt.show()\r\n    f.parent.joinpath(graphsfolder).mkdir(parents=True, exist_ok=True)\r\n    plt.savefig(f.parent.joinpath(graphsfolder, f.stem + '_lifetime' + '.png'), format = 'png', dpi=1200)\r\n    plt.savefig(f.parent.joinpath(graphsfolder, f.stem + '_lifetime' + '.eps'), format = 'eps', dpi=1200)\r\n    plt.clf()\r\n    eta.send(str(f.name) + ' has been successfully processed')\r\n\r\neta.send('FINISHED')","vi_templatejhrlp8yt":"{\"nodes\":[{\"x\":145,\"y\":157,\"fixed\":true,\"initial\":true,\"text\":\"stopped\",\"marked\":true},{\"x\":366,\"y\":174,\"fixed\":true,\"text\":\"started\",\"marked\":true}],\"edges\":[{\"source\":0,\"target\":1,\"text\":\"2\"},{\"source\":1,\"target\":0,\"text\":\"3\"},{\"source\":1,\"target\":1,\"text\":\"2\"}],\"usercode\":\"CLOCK(c3)\\nHISTOGRAM(t3,(`bins`,`binsize`))\\n\\nstarted:\\n    c3.start()\\nstopped:\\n    c3.stop()\\n    t3.record(c3)\"}","vi_templatejhrlupxy":"{\"nodes\":[{\"x\":141,\"y\":129,\"fixed\":true,\"initial\":true,\"text\":\"a\"}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"1\"}],\"usercode\":\"a:\\n    emit(3,0)# here, ch1 is duplicated to ch3 with a delay of 0ps\"}","ri_templatejkim223k":null,"var_templatejkim2z6x":null,"var_templatejkim3bkj":null,"var_templatejkim48wp":null,"var_templatejkim6uch":null,"vi_templatejks7tmye":"{\"nodes\":[{\"x\":224,\"y\":115,\"fixed\":true,\"initial\":true,\"text\":\"state\",\"marked\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"3\"}],\"usercode\":\"CLOCK(c2)\\nHISTOGRAM(t2,(`bins`,`binsize`))\\n\\nstate--3-->state:\\n    c2.stop()\\n    c2.start(LAST_SYNC)\\n    t2.record(c2)\\n\"}","vi_templatejks7yt8a":"{\"nodes\":[{\"x\":141,\"y\":129,\"fixed\":true,\"initial\":true,\"text\":\"a\"}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"0\"}],\"usercode\":\"a:\\n    emit(2,0)# here, ch0 is duplicated to ch2 with a delay of 0ps\"}","var_templatejks89alb":null,"dpp_templatejlxgwwaf":"#------IMPORTS-----\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.widgets import Button\r\n\r\n#------ETA PROCESSING-----\r\ncutfile = eta.simple_cut(file,4)\r\nresult = eta.run(cutfile, group='compile')\r\nh1=result[ch_sel]\r\n#h1=np.loadtxt(\"C:\\PathToFile\\result.txt\") #use this line instead of the previous 3 lines (ETA PROCESSING) if you want to load a reviously saved file for plotting\r\n#np.savetxt(\"C:\\PathToFile\\result.txt\",h1) #use this line instead of plotting if you want to save the analysis result to a file\r\n\r\n#------PLOTTING-----\r\nbinsize=int(float(binsize))\r\n\r\n\r\nplt.close(fig='all')\r\nfig, ax = plt.subplots()\r\nplt.subplots_adjust(bottom=0.2)\r\nax.set_xlabel('Time delay (ps)')\r\nax.set_ylabel('Histogram events')\r\nax.set_title(expname)\r\n\r\nl = ax.bar(np.arange(len(h1))*binsize, h1, binsize, yerr=np.sqrt(h1))\r\nlog=False\r\n\r\nclass Index(object):\r\n    def linlog(self, event):\r\n        global ax, plt, log\r\n        if log==True:\r\n            ax.set_yscale(\"linear\")\r\n            log=False\r\n        else:\r\n            ax.set_yscale(\"log\", nonposy='clip')\r\n            log=True\r\n        plt.draw()\r\n\r\ncallback = Index()\r\naxlinlog = plt.axes([0.81, 0.05, 0.1, 0.075])\r\nblinlog = Button(axlinlog, 'Lin/Log')\r\nblinlog.on_clicked(callback.linlog)\r\n\r\nplt.show()","dpp_templatek1wj2rzj":"#------IMPORTS-----\r\nfrom os import path\r\nimport pathlib\r\nfrom enum import Enum\r\n\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.animation as animation\r\nimport matplotlib.widgets\r\nfrom matplotlib.widgets import Button\r\n\r\neta.send(\"ETA is running in realtime...\", \"running\")\r\n\r\nrecords_per_cut = int(float(records_per_cut)) if records_per_cut != \"\" else None\r\n\r\nSIMULATE_GROWTH = True\r\nDATAFOLDER = 'analyzed data'\r\nLABEL = 'histogram'\r\n\r\nbinsize = int(float(binsize))\r\nbins = int(float(bins))\r\nbin_factor = int(float(binsize))\r\nfile = pathlib.Path(file)\r\n\r\nctx1=None\r\nfig, ax = plt.subplots()\r\nax.set_ylabel('Histogram events')\r\nax.set_xlabel('Time delay (ps)')\r\nax.set_title(expname)\r\n\r\n\r\nclass DataPlot(object):\r\n    def __init__(self, fig, ax, file, ch_sel, bin_factor, \r\n                 records_per_cut=None, interval=100, \r\n                 numpy=None, widgets=None):\r\n        \"\"\" Calculates the next cut and writes it to the plot\r\n            ax: Axis to draw on\r\n            file: str or Path of file currently investigated\r\n            ch_sel: Channel of the histogram to investigate (e.g. t1)\r\n            bin_factor: The multiplication factor for each bin.\r\n            interval: The interval of the simulation\r\n            timeout: How long to wait for enough data until frame is skipped (milliseconds)\r\n        \"\"\"\r\n        global SIMULATE_GROWTH\r\n        \r\n        self.file = file\r\n        self.ch_sel = ch_sel\r\n        self.bin_factor = bin_factor\r\n        self.records_per_cut = records_per_cut\r\n        \r\n        self.fig = fig\r\n        self.ax = ax\r\n        self.fig.subplots_adjust(bottom=0.22)\r\n        \r\n        self.line, = self.ax.plot([], [], 'r-')\r\n        self.interval = interval\r\n        self.numpy = numpy\r\n        self.widgets = widgets\r\n        \r\n        self.set_accumulation_mode()\r\n\r\n        # Setup Widgets\r\n        axsavedat = self.fig.add_axes([0.59, 0.05, 0.1, 0.075])\r\n        axmode = self.fig.add_axes([0.7, 0.05, 0.1, 0.075])\r\n        axlinlog = self.fig.add_axes([0.81, 0.05, 0.1, 0.075])\r\n        self.bsavedat = widgets.Button(axsavedat, 'Save')\r\n        self.blinlog = widgets.Button(axlinlog, 'Lin/Log')\r\n        self.bmode = widgets.Button(axmode, 'Mode')\r\n        self.bsavedat.on_clicked(self.save_dat)\r\n        self.blinlog.on_clicked(self.toggle_scale)\r\n        self.bmode.on_clicked(self.toggle_mode)\r\n        \r\n        # First cut to detect file properties and rate estimation\r\n        self.cut = eta.incremental_cut(self.file, cut=None,\r\n                                       rec_per_cut=1,\r\n                                       verbose=False)\r\n        \r\n        if self.records_per_cut is None:\r\n            self.estimate_growth()\r\n\r\n        self.waiting = False\r\n        self.context = None\r\n        \r\n        if SIMULATE_GROWTH is False:\r\n            file_size = self.file.stat().st_size\r\n            file_size = file_size - self.cut[0][0]\r\n            existing_records = file_size//self.cut[0][5]\r\n        else:\r\n            existing_records = self.records_per_cut\r\n\r\n        self.cut = eta.incremental_cut(self.file, cut=None, \r\n                                       rec_per_cut=existing_records, verbose=False) # Start always from begining of file\r\n        \r\n        if not eta.wait_for_data(self.cut, timeout=0.01):\r\n            eta.send('Something went wrong, there should be no waiting here.')\r\n            \r\n        result, self.context = eta.run(self.cut, group='compile',\r\n                                       ctxs=None, sum_results=True, \r\n                                       iterate_ctxs=True, verbose=False)\r\n\r\n        self.ydata = result[self.ch_sel]\r\n        self.max_value = self.numpy.amax(self.ydata) \r\n        self.y_max = self.max_value*1.5\r\n\r\n        self.xdata = self.numpy.arange(0, self.ydata.size)*self.bin_factor\r\n\r\n    def estimate_growth(self):\r\n        \"\"\" Estimates the grow rate per second, will sleep for 1000ms.\r\n        The event loop continues running.\r\n        \"\"\"\r\n        eta.send('Estimating File growth.')\r\n        file_size_old = self.file.stat().st_size\r\n        plt.pause(1)\r\n        file_size_new = self.file.stat().st_size\r\n        eta.send('Done.')\r\n        \r\n        self.growth_rate = (file_size_new - file_size_old)/self.cut[0][5] #Bytes per record\r\n        self.records_per_cut = int(self.growth_rate * self.interval)\r\n    \r\n    def init(self):\r\n        \"\"\" Initializes the figure\r\n        \"\"\"\r\n        self.ax.set_xlim(0, self.ydata.size*self.bin_factor)\r\n        self.line.set_xdata(self.xdata)\r\n        \r\n        self.y_max=self.numpy.amax(self.ydata)*1.5\r\n        self.ax.set_ylim(0.01, self.y_max)\r\n        self.line.set_ydata(self.ydata)\r\n        \r\n        return self.line,\r\n    \r\n\r\n    def __call__(self, i):\r\n        # This way the plot can continuously run and we just keep\r\n        # watching new realizations of the process\r\n        if i == 0:\r\n            return self.init()\r\n        \r\n        if self.waiting == False:\r\n            self.cut = eta.incremental_cut(self.file, cut=self.cut, \r\n                                            rec_per_cut=self.records_per_cut, verbose=False)\r\n\r\n        if not eta.wait_for_data(self.cut, timeout=0.01):\r\n            self.waiting = True\r\n            # No new data available, we do not modify the plot\r\n            return self.line,\r\n        else:\r\n            self.waiting = False\r\n            context = self.context if self.mode == 'accumulation' else None\r\n            \r\n            result, self.context = eta.run(self.cut, group='compile',\r\n                                           ctxs=context, sum_results=True, \r\n                                           iterate_ctxs=True, verbose=False)\r\n            self.ydata = result[self.ch_sel]\r\n        \r\n        max_value = self.numpy.amax(self.ydata)\r\n        if max_value >= self.y_max*0.9 or max_value < self.max_value*0.9:\r\n            self.y_max = max_value*1.5\r\n            self.max_value = max_value\r\n            self.ax.set_ylim(0.01, self.y_max)\r\n            self.fig.canvas.draw_idle()\r\n\r\n        self.line.set_ydata(self.ydata)\r\n        return self.line,\r\n    \r\n    def toggle_scale(self, event):\r\n        if self.ax.get_yscale() == 'log':\r\n            self.set_linear()\r\n        elif self.ax.get_yscale() == 'linear':\r\n            self.set_log()\r\n        self.fig.canvas.draw_idle()    \r\n\r\n    def set_log(self):\r\n        print(self.numpy.min(self.ydata))\r\n        \r\n        self.ax.set_yscale('log', nonposy='clip')\r\n\r\n    def set_linear(self):\r\n        self.ax.set_yscale('linear')\r\n        \r\n    def set_accumulation_mode(self):\r\n        self.mode = 'accumulation'\r\n        \r\n    def set_alignment_mode(self):\r\n        self.mode = 'align'\r\n\r\n    def toggle_mode(self, event):\r\n        if self.mode == 'align':\r\n            self.set_accumulation_mode()\r\n        elif self.mode == 'accumulation':\r\n            self.set_alignment_mode()\r\n    \r\n    def save_dat(self, event):\r\n        global DATAFOLDER, LABEL\r\n        self.file.parent.joinpath(DATAFOLDER).mkdir(parents=True, exist_ok=True) # Create analyzed folder\r\n        \r\n        file_index = 0\r\n        while self.file.parent.joinpath(DATAFOLDER, f\"{self.file.stem}_{LABEL}_{file_index:0=3d}.txt\").exists(): #create unique index for file\r\n            file_index += 1\r\n            \r\n        self.numpy.savetxt(self.file.parent.joinpath(DATAFOLDER, f\"{self.file.stem}_{LABEL}_{file_index:0=3d}.txt\"), \r\n                           self.numpy.transpose([self.xdata, self.ydata]))\r\n\r\ndp = DataPlot(fig, ax, file, ch_sel, bin_factor, records_per_cut, interval=100, \r\n              numpy=np, widgets=matplotlib.widgets)\r\n\r\nani = animation.FuncAnimation(fig, dp, init_func=dp.init, interval=100, repeat=False,\r\n                              cache_frame_data=False, blit=True)\r\n\r\nplt.show()\r\n\r\neta.send(\"ETA realtime is stopped.\", \"stopped\")\r\n","var_templatek1wj6afv":null}