{"uettp_exp_config":"../qutauTT.qt###qt2###-1###-1###-1###8","ss":"{\"nodes\":[{\"x\":129,\"y\":193,\"fixed\":true,\"initial\":true},{\"x\":259,\"y\":156,\"fixed\":true,\"text\":\"b\"},{\"x\":480,\"y\":220,\"fixed\":true,\"text\":\"e\",\"px\":480,\"py\":220}],\"edges\":[{\"source\":0,\"target\":1,\"text\":\"0\"},{\"source\":1,\"target\":1,\"text\":\"0\"},{\"source\":1,\"target\":2,\"text\":\"1\"},{\"source\":2,\"target\":1,\"text\":\"0\"}],\"usercode\":\"\"}","dl-10ns":"{\"nodes\":[{\"x\":432,\"y\":256,\"fixed\":true,\"text\":\"a\",\"initial\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"1\"}],\"usercode\":\"signal(a,2,100)\\ntable(\\\"startstop\\\")\\n\"}","nn":"{\"nodes\":[{\"x\":260,\"y\":292,\"fixed\":true,\"text\":\"a\",\"initial\":true},{\"x\":544,\"y\":252,\"fixed\":true,\"text\":\"b\"}],\"edges\":[{\"source\":0,\"target\":1,\"text\":\"0,2\"},{\"source\":1,\"target\":0,\"text\":\"0,2\"}],\"usercode\":\"record(a)\\nrecord(b)\\nlinear(a,symbol(\\\"c\\\"),1,a,-1,b,0)\\nlinear(b,symbol(\\\"c\\\"),1,b,-1,a,0)\\nhist(a,table(\\\"nn\\\"),symbol(\\\"c\\\"),0,1000000,16)\\nhist(b,table(\\\"nn\\\"),symbol(\\\"c\\\"),0,1000000,16)\\n\"}","uettp_exp_metadata":"{'ss': {'instrument': 'ss', 'comment': 'start stop measurement', 'inputs': '[0, 1]', 'outputs': '[]', 'type': 'compile'}, 'dl-10ns': {'instrument': 'dl-10ns', 'comment': 'delay line', 'inputs': '[1]', 'outputs': '[2]', 'type': 'compile'}, 'nn': {'instrument': 'nn', 'comment': 'nearest neighbor', 'inputs': '[0, 2]', 'outputs': '[]', 'type': 'compile'}}","editing-graph":"ss","eta_server_ws":"ws://localhost:5678","jerl6t3a":"{\"nodes\":[{\"x\":497,\"y\":388,\"fixed\":true,\"initial\":true},{\"x\":723,\"y\":340,\"fixed\":true}],\"edges\":[{\"source\":0,\"target\":1},{\"source\":1,\"target\":0}],\"usercode\":\"\\n#Instrument Design Guide!!\\n#\\n#Imagine a experiment setup. There are multiple lights connected to\\n#single photon detectors (labeled as 1,2,3,etc.), and one light connected\\n#to the laser (labeled as 0). Light flashes when a signal comes. \\n#\\n#In addition, there are many time recorders, each with a button and a \\n#screen. When you press the button, it will display the current time on\\n#its screen. When you press again, it overwrites the display.\\n#\\n#You start with a initial time recorder. When there is a flash, you move\\n#to a time recorder according to the instruction and press the button.\\n#Then you wait for another flash.  \\n#\\n#Each circle indicates a time recorder, and label indicates its name.\\n#Use pointer to indicate the transition form one recorder to another, \\n#put the label of the light you should wait for on the label of each\\n#transition.\\n#To draw the instruction, you can use both mouse and keys.\\n#\\n#Mouse:\\n#    Double click on empty space - creates new time recorder\\n#    Click on a circle and drag to another - creates new transition\\n#    Double click on a circle or transition - edit its label\\n#    Right Click to move circle and transitions\\n#\\n#Keys:\\n#    Ctrl + click - multiselection\\n#    Ctrl + Z - undo a command\\n#    Ctrl + Y - redo a command\\n#    Delete - deletes selected elements\\n#    T/R - mark/reset a element\\n#    I - make selected circle as the initial one (exclusively)\\n\"}","eta_index_table":"[{\"id\":\"ri_templatejezi0bbr\",\"name\":\"TimeTagger\",\"group / # of channels\":\"2\",\"input channels\":\"FILE\",\"output channels\":\"[0, 1]\",\"tables\":\"N/A\"},{\"id\":\"vi_templatejfawnkcz\",\"name\":\"DL0-2\",\"group / # of channels\":\"compile\",\"input channels\":\"[0]\",\"output channels\":\"[2]\",\"tables\":\"[]\"},{\"id\":\"vi_templatejfc9koma\",\"name\":\"DL1-3\",\"group / # of channels\":\"compile\",\"input channels\":\"[1]\",\"output channels\":\"[3]\",\"tables\":\"[]\"},{\"id\":\"vi_templatejfb2qshf\",\"name\":\"Correlation\",\"group / # of channels\":\"compile\",\"input channels\":\"[3, 0]\",\"output channels\":\"[]\",\"tables\":\"['h2']\"}]","jercsget":"{\"nodes\":[{\"x\":610,\"y\":185,\"fixed\":true},{\"x\":316,\"y\":296,\"fixed\":true},{\"x\":792,\"y\":352,\"fixed\":true},{\"x\":836,\"y\":274,\"fixed\":true},{\"x\":697,\"y\":372,\"fixed\":true},{\"x\":464,\"y\":236,\"weight\":1,\"fixed\":true,\"text\":\"\"}],\"edges\":[{\"source\":5,\"target\":1,\"text\":\"1.1,2.1,3\"},{\"source\":5,\"target\":0}],\"usercode\":\"\\n#Instrument Design Guide!!\\n#\\n#Imagine a experiment setup. There are multiple lights connected to\\n#single photon detectors (labeled as 1,2,3,etc.), and one light connected\\n#to the laser (labeled as 0). Light flashes when a signal comes. \\n#\\n#In addition, there are many time recorders, each with a button and a \\n#screen. When you press the button, it will display the current time on\\n#its screen. When you press again, it overwrites the display.\\n#\\n#You start with a initial time recorder. When there is a flash, you move\\n#to a time recorder according to the instruction and press the button.\\n#Then you wait for another flash.  \\n#\\n#Each circle indicates a time recorder, and label indicates its name.\\n#Use pointer to indicate the transition form one recorder to another, \\n#put the label of the light you should wait for on the label of each\\n#transition.\\n#To draw the instruction, you can use both mouse and keys.\\n#\\n#Mouse:\\n#    Double click on empty space - creates new time recorder\\n#    Click on a circle and drag to another - creates new transition\\n#    Double click on a circle or transition - edit its label\\n#    Right Click to move circle and transitions\\n#\\n#Keys:\\n#    Ctrl + click - multiselection\\n#    Ctrl + Z - undo a command\\n#    Ctrl + Y - redo a command\\n#    Delete - deletes selected elements\\n#    T/R - mark/reset a element\\n#    I - make selected circle as the initial one (exclusively)\\n\"}","jercsh2m":null,"eta_index":"{\"expcfg_name\":\"12\",\"expcfg_rslot\":\"2\",\"expcfg_rchn\":\"12\",\"expcfg_vchn\":\"12\",\"expcfg_type\":\"12\"}","jerct6pm":"{\"nodes\":[{\"x\":610,\"y\":185,\"fixed\":true}],\"edges\":[],\"usercode\":\"\\n#Instrument Design Guide!!\\n#\\n#Imagine a experiment setup. There are multiple lights connected to\\n#single photon detectors (labeled as 1,2,3,etc.), and one light connected\\n#to the laser (labeled as 0). Light flashes when a signal comes. \\n#\\n#In addition, there are many time recorders, each with a button and a \\n#screen. When you press the button, it will display the current time on\\n#its screen. When you press again, it overwrites the display.\\n#\\n#You start with a initial time recorder. When there is a flash, you move\\n#to a time recorder according to the instruction and press the button.\\n#Then you wait for another flash.  \\n#\\n#Each circle indicates a time recorder, and label indicates its name.\\n#Use pointer to indicate the transition form one recorder to another, \\n#put the label of the light you should wait for on the label of each\\n#transition.\\n#To draw the instruction, you can use both mouse and keys.\\n#\\n#Mouse:\\n#    Double click on empty space - creates new time recorder\\n#    Click on a circle and drag to another - creates new transition\\n#    Double click on a circle or transition - edit its label\\n#    Right Click to move circle and transitions\\n#\\n#Keys:\\n#    Ctrl + click - multiselection\\n#    Ctrl + Z - undo a command\\n#    Ctrl + Y - redo a command\\n#    Delete - deletes selected elements\\n#    T/R - mark/reset a element\\n#    I - make selected circle as the initial one (exclusively)\\n\"}","jerdenhk":null,"#expcfg":"{\"exp_name\":\"corr_w_fit\",\"exp_disc\":\"corr_w_fit\",\"exp_email\":\"\",\"exp_ver\":\"1\",\"ws\":\"ws://localhost:5678\"}","jerlp9ua":"{\"nodes\":[],\"edges\":[],\"usercode\":\"\\n#Instrument Design Guide!!\\n#\\n#Imagine a experiment setup. There are multiple lights connected to\\n#single photon detectors (labeled as 1,2,3,etc.), and one light connected\\n#to the laser (labeled as 0). Light flashes when a signal comes. \\n#\\n#In addition, there are many time recorders, each with a button and a \\n#screen. When you press the button, it will display the current time on\\n#its screen. When you press again, it overwrites the display.\\n#\\n#You start with a initial time recorder. When there is a flash, you move\\n#to a time recorder according to the instruction and press the button.\\n#Then you wait for another flash.  \\n#\\n#Each circle indicates a time recorder, and label indicates its name.\\n#Use pointer to indicate the transition form one recorder to another, \\n#put the label of the light you should wait for on the label of each\\n#transition.\\n#To draw the instruction, you can use both mouse and keys.\\n#\\n#Mouse:\\n#    Double click on empty space - creates new time recorder\\n#    Click on a circle and drag to another - creates new transition\\n#    Double click on a circle or transition - edit its label\\n#    Right Click to move circle and transitions\\n#\\n#Keys:\\n#    Ctrl + click - multiselection\\n#    Ctrl + Z - undo a command\\n#    Ctrl + Y - redo a command\\n#    Delete - deletes selected elements\\n#    T/R - mark/reset a element\\n#    I - make selected circle as the initial one (exclusively)\\n\"}","jerlpadl":null,"#run_cfg":"{\"expcfg_ws\":\"ws://localhost:5678\",\"expcfg_wd\":\"..\\\\\\\\\",\"expcfg_ttfname\":\"4eee;nbhgh\",\"expcfg_prefix\":\"\",\"expcfg_res\":\"\",\"expcfg_sync\":\"\",\"expcfg_truncate\":\"\",\"expcfg_threads\":\"\"}","ri_templatejesvk71i":null,"ri_templatejesvk7gs":null,"ri_templatejesvkbsm":null,"ri_templatejesvkic2":null,"ri_templatejesvkoqk":null,"ri_templatejesvktgs":null,"ri_templatejesvky08":null,"ri_templatejesvkzqq":null,"ri_templatejesvlbpx":null,"ri_templatejesvlcl0":null,"ri_templatejesvnkpq":null,"ri_templatejesvnlrv":null,"ri_templatejeswl1kx":null,"vi_templatejeswlw8e":"{\"nodes\":[{\"x\":332,\"y\":256,\"fixed\":true,\"text\":\"a\",\"initial\":true},{\"x\":392,\"y\":253,\"fixed\":true,\"text\":\"b\"}],\"edges\":[{\"source\":0,\"target\":1,\"text\":\"1\"}],\"usercode\":\"\\n#Instrument Design Guide!!\\n#\\n#Imagine a experiment setup. There are multiple lights connected to\\n#single photon detectors (labeled as 1,2,3,etc.), and one light connected\\n#to the laser (labeled as 0). Light flashes when a signal comes. \\n#\\n#In addition, there are many time recorders, each with a button and a \\n#screen. When you press the button, it will display the current time on\\n#its screen. When you press again, it overwrites the display.\\n#\\n#You start with a initial time recorder. When there is a flash, you move\\n#to a time recorder according to the instruction and press the button.\\n#Then you wait for another flash.  \\n#\\n#Each circle indicates a time recorder, and label indicates its name.\\n#Use pointer to indicate the transition form one recorder to another, \\n#put the label of the light you should wait for on the label of each\\n#transition.\\n#To draw the instruction, you can use both mouse and keys.\\n#\\n#Mouse:\\n#    Double click on empty space - creates new time recorder\\n#    Click on a circle and drag to another - creates new transition\\n#    Double click on a circle or transition - edit its label\\n#    Right Click to move circle and transitions\\n#\\n#Keys:\\n#    Ctrl + click - multiselection\\n#    Ctrl + Z - undo a command\\n#    Ctrl + Y - redo a command\\n#    Delete - deletes selected elements\\n#    Ctrl + T/R - mark/reset a element\\n#    Ctrl + I - make selected circle as the initial one (exclusively)\\n\"}","ri_templatejeswlwzi":null,"ri_templatejet0cyz8":null,"eta_dpp_table":"[{\"variable\":\"filename\",\"value\":\"g2_XX_slit67_1pi_12k-10k_3h_001.ptu\"}]","vi_templatejet0emx6":"{\"nodes\":[],\"edges\":[],\"usercode\":\"\\n#Instrument Design Guide!!\\n#\\n#Imagine a experiment setup. There are multiple lights connected to\\n#single photon detectors (labeled as 1,2,3,etc.), and one light connected\\n#to the laser (labeled as 0). Light flashes when a signal comes. \\n#\\n#In addition, there are many time recorders, each with a button and a \\n#screen. When you press the button, it will display the current time on\\n#its screen. When you press again, it overwrites the display.\\n#\\n#You start with a initial time recorder. When there is a flash, you move\\n#to a time recorder according to the instruction and press the button.\\n#Then you wait for another flash.  \\n#\\n#Each circle indicates a time recorder, and label indicates its name.\\n#Use pointer to indicate the transition form one recorder to another, \\n#put the label of the light you should wait for on the label of each\\n#transition.\\n#To draw the instruction, you can use both mouse and keys.\\n#\\n#Mouse:\\n#    Double click on empty space - creates new time recorder\\n#    Click on a circle and drag to another - creates new transition\\n#    Double click on a circle or transition - edit its label\\n#    Right Click to move circle and transitions\\n#\\n#Keys:\\n#    Ctrl + click - multiselection\\n#    Ctrl + Z - undo a command\\n#    Ctrl + Y - redo a command\\n#    Delete - deletes selected elements\\n#    Ctrl + T/R - mark/reset a element\\n#    Ctrl + I - make selected circle as the initial one (exclusively)\\n\"}","vi_templatejet0ezix":null,"vi_templatejevjreof":"{\"nodes\":[{\"x\":380,\"y\":203,\"fixed\":true,\"text\":\"start\",\"px\":380,\"py\":203},{\"x\":109,\"y\":158,\"fixed\":true,\"text\":\"stop\",\"px\":109,\"py\":158,\"initial\":true}],\"edges\":[{\"source\":0,\"target\":1,\"text\":\"3\"},{\"source\":1,\"target\":0,\"text\":\"0\"},{\"source\":0,\"target\":0,\"text\":\"0\"}],\"usercode\":\"CLOCK(c1)\\nCLOCK(c2)\\nHISTOGRAM(t1,[(78000,16)])#7800000\\nstart:\\n    c1.start()\\n\\nstop:\\n    c1.stop()\\n\\n    t1.record(c1)\\n\"}","ri_templatejevjrf8h":null,"vi_templatejevjrmen":null,"code":"import numpy as np\r\nfrom lmfit import Model\r\nimport plotly.graph_objs as go\r\nimport dash_core_components as dcc\r\nimport dash_html_components as html\r\nimport dash\r\n#h_y = np.loadtxt(\"C:\\\\Users\\\\Lucas Schweickert\\\\Desktop\\\\h2.tensor\")\r\n#histogram = ETA_MUTLITRHEAD(filename, eta_compiled_code,print,4)\r\nh_y = eta.run(filename, wrapper,mainloop,print)\r\n\r\nh_y[0]=0\r\nh_y[-1]=0\r\nh_x = np.arange(h_y.size)*16\r\nfit_text=\"no fit\"\r\n# Create traces\r\noriginal_data=go.Scatter(\r\n                    x = h_x,\r\n                    y = h_y,\r\n                    mode = 'markers',\r\n                    name = 'original g(2)'\r\n                )\r\nfit_layout={ 'title': \"ETA G(2) fit\", 'height': 800}\r\napp = dash.Dash()\r\napp.layout = html.Div([\r\n    html.H1('ETA G(2) fit'),\r\n    html.Div([\r\n            dcc.Input(id='num_spks', type='number',value=0),\r\n            dcc.Input(id='offsetx', type='number',value=-60000),\r\n\t\t\thtml.Button('Fit', id='button'),\r\n    ]),\r\n    html.Pre( children=fit_text,id='report'),\r\n    dcc.Graph(id='mygraph1',figure={'data':[original_data],  \"layout\":fit_layout}),\r\n])\r\n   \r\n@app.callback(\r\n        dash.dependencies.Output('report', component_property='children'),\r\n        [dash.dependencies.Input('mygraph1', 'figure')]\r\n        )\r\ndef update_text(useless):\r\n    global fit_text\r\n    return fit_text\r\n\r\n@app.callback(\r\n    dash.dependencies.Output('mygraph1', 'figure'),\r\n    [dash.dependencies.Input('button', 'n_clicks')],\r\n    [dash.dependencies.State('num_spks', 'value'),dash.dependencies.State('offsetx', 'value')])\r\ndef update_output(n_clicks, num_spks,offsetx):\r\n    global fit_text,original_data,h_x,h_y,go,dcc,np,Model,fit_layout\r\n    #target function\r\n    def pulsed_g2(x, B, A0, A1, tr, rep,offsetx,num_spks):\r\n        global np\r\n        x=x+offsetx\r\n        sidepeaks=0.0\r\n        for i in range(1,int(num_spks)):\r\n            sidepeaks+=A1*np.exp(-abs(x-i*rep)/tr)+A1*np.exp(-abs(x+i*rep)/tr)    \r\n        add1= A0*np.exp(-abs(x)/tr)\r\n        add2=(sidepeaks)*(1-np.exp(-abs(x)/(tr)))\r\n        ret=(B+add1+add2)\r\n        return ret\r\n    #fitting\r\n    data=[original_data]\r\n    try:\r\n        mod = Model(pulsed_g2)\r\n        pars = mod.make_params()\r\n        pars[\"num_spks\"].vary = False\r\n        result = mod.fit(h_y, x=h_x, num_spks=num_spks, B=-8,A0=0.6, A1=60, tr=218, rep=12500,offsetx=offsetx)\r\n\r\n        data.append( go.Scatter(\r\n                    x = h_x,\r\n                    y = result.best_fit ,\r\n                    mode = 'line',\r\n                    name = 'fitted g(2)',\r\n                ))\r\n        fit_text= result.fit_report()\r\n    except Exception as ee:\r\n        fit_text=str(ee)\r\n \r\n    return {'data':data,  \"layout\":fit_layout}\r\n\r\neta.display(app)","ri_templatejeyhgos8":null,"ri_templatejeyimhik":null,"vi_templatejeymoe6z":null,"ri_templatejeymoipg":null,"ri_templatejeymon7h":null,"vi_templatejeynpzsd":"{\"nodes\":[],\"edges\":[],\"usercode\":\"#Instrument Design Guide\\n\\n#Imagine a virtual instrument, where there are some sockets for different\\n#signal channels, and a big screen showing a graph with blobs and arrows.\\n#There is one and only one blinking blob, which indicates the current\\n#state of your system, we call it the NOW blob.\\n\\n#On the arrows going out of this NOW blob writes the condition when the \\n#NOW blob should stop blinking and the blob pointed by this arrow should\\n#start to blink. The conditions are the input signal coming from your \\n#system. \\n\\n#You can draw the graph representing the possible state transition in \\n#your system, using both mouse and keys.\\n#Mouse:\\n#    Double click on empty space - creates a new blob\\n#    Click on a blob and drag to another - creates a new arrow\\n#    Double click on a blob or arrow - edit its label\\n#    Right Click and hold - move blob or arrow\\n#Keys:\\n#    Del - deletes selected elements\\n#    Ctrl + Y/Z - redo/undo a command\\n#    Ctrl + T/R - mark/reset a blob\\n#    Ctrl + I - make selected blob as the initial one (exclusively)\\n\\n#You can program the instrument to do things when it makes a transition \\n#using a syntax like\\n*>blob1,blob2>blob3:\\n#which declares a trigger which happens whenever it goes to blob1, \\n#or only when it goes from blob2 to blob3.\\n\\n# When the condition is fulfilled, the instrument will do your analytical \\n#instructions, for example,\\nstartclock(c1)\\n#will start a clock labeled c1, which can be used together with  \\nhist(c1,10,10,100)\\n#to make a histogram with time interval recorded on the clock c1.\\n\\n#To learn more about the ETA analytical instructions, please refer to the \\n#https://timetag.github.io or the ETAhub.\\n\\n\"}","vi_templatejf9h6x69":"{\"nodes\":[{\"x\":233,\"y\":262,\"fixed\":true,\"text\":\"s1\",\"initial\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"0\"}],\"usercode\":\"s1-->s1:\\n    emit(2,60000)\"}","vi_templatejf9hmy5v":"{\"nodes\":[{\"x\":113,\"y\":227,\"fixed\":true,\"initial\":true,\"text\":\"s1\"}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"0\"}],\"usercode\":\"s1--0-->s1:\\n    emit(3,60000)\"}","vi_templatejf9n48hr":"{\"nodes\":[{\"x\":249,\"y\":257,\"fixed\":true,\"initial\":true,\"text\":\"s1\"}],\"edges\":[{\"source\":0,\"target\":0}],\"usercode\":\"s1:\\n    emit(2,60000)\"}","vi_templatejf9o70t9":"{\"nodes\":[{\"x\":231,\"y\":311,\"fixed\":true,\"text\":\"s1\",\"initial\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"0\"}],\"usercode\":\"s1:\\n    emit(2,60000)\"}","ri_templatejezi08hr":null,"ri_templatejezi0bbr":null,"vi_templatejezijmdt":null,"vi_templatejezijopk":null,"vi_templatejezil8kt":null,"ri_templatejeziu1xy":null,"vi_templatejezr5kom":"{\"nodes\":[{\"x\":616,\"y\":278,\"fixed\":true,\"text\":\"a\"}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"0\"}],\"usercode\":\"a:\\n    emit(2,1000)\"}","vi_templatejezr6ptq":"{\"nodes\":[{\"x\":481,\"y\":167,\"fixed\":true,\"text\":\"a\"}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"0\"}],\"usercode\":\"\\na:\\n    emit(0,1000)\"}","vi_templatejezr7fuf":"{\"nodes\":[{\"x\":564,\"y\":162,\"fixed\":true,\"text\":\"a\",\"initial\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"1\"}],\"usercode\":\"a:\\n    emit(3,50000)\"}","vi_templatejezra6l0":null,"vi_templatejezra8f9":null,"vi_templatejezrac9o":null,"vi_templatejezrah08":null,"vi_templatejezrcchb":null,"vi_templatejezrcgcc":null,"vi_templatejezrcoe7":null,"vi_templatejezw1f04":"{\"nodes\":[{\"x\":351,\"y\":219,\"fixed\":true,\"text\":\"a\"}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"0\"}],\"usercode\":\"\\na:\\n    emit(2,1000)\"}","ri_templatejf0zabbe":null,"vi_templatejf17is9s":"{\"nodes\":[{\"x\":376,\"y\":162,\"fixed\":true,\"text\":\"b\",\"initial\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"1\"}],\"usercode\":\"b:\\n    emit(3,50000)\"}","vi_templatejf180pkk":"{\"nodes\":[{\"x\":684,\"y\":367,\"fixed\":true,\"text\":\"start\",\"px\":684,\"py\":367},{\"x\":413,\"y\":322,\"fixed\":true,\"text\":\"stop\",\"px\":413,\"py\":322,\"initial\":true}],\"edges\":[{\"source\":1,\"target\":0,\"text\":\"0\"},{\"source\":0,\"target\":1,\"text\":\"1\"},{\"source\":0,\"target\":0,\"text\":\"0\"}],\"usercode\":\"TABLE(t2)\\nCLOCK(c2)\\nstart:\\n    startclock(c2)\\nstop:\\n    stopclock(c2)\\n    hist(c2,t2,0,16,62502)\\n\\n\\n\"}","vi_templatejf18hces":"{\"nodes\":[{\"x\":564,\"y\":162,\"fixed\":true,\"text\":\"a\",\"initial\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"0\"}],\"usercode\":\"a:\\nemit(2,50000)\"}","vi_templatejfawnkcz":"{\"nodes\":[{\"x\":320,\"y\":248,\"fixed\":true,\"text\":\"a\",\"initial\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"0\"}],\"usercode\":\"\\na:\\n    emit(2,90000000)#90000000\"}","vi_templatejfb2qshf":"{\"nodes\":[{\"x\":857,\"y\":123,\"fixed\":true,\"text\":\"start\",\"px\":857,\"py\":123},{\"x\":586,\"y\":78,\"fixed\":true,\"text\":\"stop\",\"px\":586,\"py\":78,\"initial\":true}],\"edges\":[{\"source\":0,\"target\":1,\"text\":\"3\"},{\"source\":1,\"target\":0,\"text\":\"0\"},{\"source\":0,\"target\":0,\"text\":\"0\"},{\"source\":1,\"target\":1,\"text\":\"3\"}],\"usercode\":\"HISTOGRAM(h2,(7500,16))\\nCLOCK(c3,100,1)\\nstart:\\n    start(c3)\\nstop:\\n    stop(c3)\\n    record_all(h2,c3)\"}","vi_templatejfc9kljk":null,"vi_templatejfc9koma":"{\"nodes\":[{\"x\":320,\"y\":248,\"fixed\":true,\"text\":\"a\",\"initial\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"1\"}],\"usercode\":\"\\na:\\n    emit(3,120000)\"}","vi_templatejfcc5rlm":"{\"nodes\":[{\"x\":412,\"y\":244,\"fixed\":true,\"text\":\"a\",\"initial\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"1\"}],\"usercode\":\"\\na:\\n    emit(3,50000)\"}","vi_templatejfnwk04l":"{\"nodes\":[{\"x\":247,\"y\":203,\"fixed\":true,\"initial\":true}],\"edges\":[],\"usercode\":\"emit(4,6000000,12495,6000000)\"}","vi_templatejfctm91x":"{\"nodes\":[{\"x\":276,\"y\":144,\"fixed\":true,\"text\":\"a\"}],\"edges\":[{\"source\":0,\"target\":0}],\"usercode\":\"a:\\n    emit(2)\"}","vi_templatejffoy2w4":null,"vi_templatejfmboiko":"{\"nodes\":[],\"edges\":[],\"usercode\":\"#Instrument Design Guide\\n\\n#Imagine a virtual instrument, where there are some sockets for different\\n#signal channels, and a big screen showing a graph with blobs and arrows.\\n#There is one and only one blinking blob, which indicates the current\\n#state of your physical system.\\n\\n#On the arrows going out of this blinking blob writes the condition when\\n#the blinking blob should stop and the blob pointed by this arrow should\\n#start blinking. The conditions are the input signal coming from your \\n#physical system. \\n\\n#You can draw the graph to modelize all the possible state transitions in \\n#your physical system, and then use TRIGGERS and ACTIONS, to do \\n#analytical instructions when a transition is made. \\n\\nblob1, blob2->blob3: #TRIGGERS\\n    start(clock1) #ACTIONS\\n\\n#The example above will start clock1 whenever it goes to blob1, or only\\n#when it goes from blob2 to blob3.\\n\\n#########  click the Create button on the top to to start! #########\\n\\n#To learn more about the ETA analytical instructions, please refer to  \\n#https://timetag.github.io or the ETAhub.\\n\"}","vi_templatejfe7ohzg":"{\"nodes\":[{\"x\":323,\"y\":319,\"fixed\":true}],\"edges\":[],\"usercode\":\"HISTOGRAM(123,21,21,12)\\nHISTOGRAM(34,5,45,45)\\n#Instrument Design Guide\\n\\n#Imagine a virtual instrument, where there are some sockets for different\\n#signal channels, and a big screen showing a graph with blobs and arrows.\\n#There is one and only one blinking blob, which indicates the current\\n#state of your system, we call it the NOW blob.\\n\\n#On the arrows going out of this NOW blob writes the condition when the \\n#NOW blob should stop blinking and the blob pointed by this arrow should\\n#start to blink. The conditions are the input signal coming from your \\n#system. \\n\\n#You can draw the graph representing the possible state transition in \\n#your system, using both mouse and keys.\\n\\n#    Double click on empty space - creates a new blob\\n#    Left Click and drag on a blob - creates a new arrow\\n#    Del - deletes selected elements\\n#    Double click on a blob / arrow - edit state name / condition\\n#    (Ctrl +) Left Click on a blob or arrow - (multi)selection\\n#    Right Click and hold - move blob or arrow\\n#    Shift + T/R - make triggers / mark\\n#    Shift + I - make selected blob as the initial one (exclusively)\\n#    Ctrl + Y/Z - redo/undo a command\\n\\n#You can program the instrument to do things when it makes a transition \\n#using a syntax like\\n*>blob1,blob2>blob3:\\n#which declares a trigger which happens whenever it goes to blob1, \\n#or only when it goes from blob2 to blob3.\\n\\n# When the condition is fulfilled, the instrument will do your analytical \\n#instructions, for example,\\nstartclock(c1)\\n#will start a clock labeled c1, which can be used together with  \\nhist(c1,10,10,100)\\n#to make a histogram with time interval recorded on the clock c1.\\n\\n#To learn more about the ETA analytical instructions, please refer to the \\n#https://timetag.github.io or the ETAhub.\\n\\n\"}","vi_templatejfmvhyhc":"{\"nodes\":[{\"x\":772,\"y\":109,\"fixed\":true,\"text\":\"state2\",\"marked\":true,\"px\":772,\"py\":109},{\"x\":909,\"y\":110,\"weight\":1,\"fixed\":true,\"text\":\"state3\",\"marked\":true,\"px\":909,\"py\":110},{\"x\":653,\"y\":108,\"fixed\":true,\"text\":\"state1\",\"marked\":true,\"px\":653,\"py\":108},{\"x\":662,\"y\":8,\"fixed\":true,\"px\":662,\"py\":8}],\"edges\":[{\"source\":0,\"target\":1,\"text\":\"1\"},{\"source\":3,\"target\":0,\"text\":\"3\"},{\"source\":2,\"target\":2,\"text\":\"3\"},{\"source\":3,\"target\":2}],\"usercode\":\"\\n\\n\\n\\n#TRIGGERS and ACTIONS can be used to\\n#do analytical instructions when a \\n#transition is made.\\n#The example below will start clock1\\n#whenever state1 becomes active or a \\n#transition from state2 to state3 is\\n#made.\\nstate1,state2--1-->state3:#TRIGGERS\\n    start(clock1) #ACTIONS\\n\"}","vi_templatejfmwkvai":null,"vi_templatejfo499st":"{\"nodes\":[{\"x\":296,\"y\":226,\"fixed\":true,\"text\":\"aa\",\"initial\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"0,3\"}],\"usercode\":\"\"}","vi_templatejfpooi34":null}